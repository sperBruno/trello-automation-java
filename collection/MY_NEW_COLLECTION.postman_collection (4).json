{
	"info": {
		"_postman_id": "021cf569-df3d-46c3-9c0b-f7efbfe5cedc",
		"name": "MY_NEW_COLLECTION",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29335956",
		"_collection_link": "https://red-moon-341121.postman.co/workspace/TESTING-MOBILE~1f8bffd6-ee30-48d4-815e-f043a82ae198/collection/22975178-021cf569-df3d-46c3-9c0b-f7efbfe5cedc?action=share&source=collection_link&creator=29335956"
	},
	"item": [
		{
			"name": "TEST CASE PRUEBA",
			"item": [
				{
					"name": "TC GET CARD CEL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resutdo esperado del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status code\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that CardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"    //parse response test properties\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable card\", function () {\r",
									"    //parse response test properties\r",
									"  pm.expect(pm.response.json().cards).to.eql(pm.environment.get(\"cards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"645bf30b01598b8ebaf741c8\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.text(\"card_id\")).to.include(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id?key={{NewKey}}&token=ATTA18be6c1c9b612045683d6c6e55fd8c1138d321b2dc30b949f5cbb88533f88356DBA4DEA2",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "ATTA18be6c1c9b612045683d6c6e55fd8c1138d321b2dc30b949f5cbb88533f88356DBA4DEA2"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": [
						{
							"name": "TTC GET CARD",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://api.trello.com/1/cards/645bf30b01598b8ebaf741c8?key={{NewKey}}&token={{NewToken}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards",
										"645bf30b01598b8ebaf741c8"
									],
									"query": [
										{
											"key": "key",
											"value": "{{NewKey}}"
										},
										{
											"key": "token",
											"value": "{{NewToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 13 May 2023 19:14:57 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1527"
								},
								{
									"key": "X-Dns-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "Expect-Ct",
									"value": "max-age=0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "Surrogate-Control",
									"value": "no-store"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, must-revalidate, no-cache, no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "Thu, 01 Jan 1970 00:00:00"
								},
								{
									"key": "X-Trello-Version",
									"value": "1.209017.0"
								},
								{
									"key": "X-Trello-Environment",
									"value": "Production"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, PUT, POST, DELETE"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Accept, Content-Type"
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "x-rate-limit-api-key-interval-ms, x-rate-limit-api-key-max, x-rate-limit-api-key-remaining, x-rate-limit-api-token-interval-ms, x-rate-limit-api-token-max, x-rate-limit-api-token-remaining"
								},
								{
									"key": "X-Rate-Limit-Api-Token-Interval-Ms",
									"value": "10000"
								},
								{
									"key": "X-Rate-Limit-Api-Token-Max",
									"value": "100"
								},
								{
									"key": "X-Rate-Limit-Api-Token-Remaining",
									"value": "99"
								},
								{
									"key": "X-Rate-Limit-Db-Query-Time-Interval-Ms",
									"value": "600000"
								},
								{
									"key": "X-Rate-Limit-Db-Query-Time-Max",
									"value": "7200000"
								},
								{
									"key": "X-Rate-Limit-Db-Query-Time-Remaining",
									"value": "7199990"
								},
								{
									"key": "X-Rate-Limit-Api-Key-Interval-Ms",
									"value": "10000"
								},
								{
									"key": "X-Rate-Limit-Api-Key-Max",
									"value": "300"
								},
								{
									"key": "X-Rate-Limit-Api-Key-Remaining",
									"value": "299"
								},
								{
									"key": "X-Rate-Limit-Member-Interval-Ms",
									"value": "10000"
								},
								{
									"key": "X-Rate-Limit-Member-Max",
									"value": "375"
								},
								{
									"key": "X-Rate-Limit-Member-Remaining",
									"value": "374"
								},
								{
									"key": "Set-Cookie",
									"value": "preAuthProps=s%3A62d5c433f15678138d40a1e3%3AisEnterpriseAdmin%3Dfalse.4fjBiDE3JGdJqvj5gcBDcPir8EuYLOxgxmcHv%2FzY9Ks; Path=/; HttpOnly"
								},
								{
									"key": "X-Server-Time",
									"value": "1684005297008"
								},
								{
									"key": "Server",
									"value": "AtlassianEdge"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Atl-Traceid",
									"value": "8df7062544387635"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\": [{\"url\": \"https://dz8aopenkvv6s.cloudfront.net\"}], \"group\": \"endpoint-1\", \"include_subdomains\": true, \"max_age\": 600}"
								},
								{
									"key": "Nel",
									"value": "{\"failure_fraction\": 0.001, \"include_subdomains\": true, \"max_age\": 600, \"report_to\": \"endpoint-1\"}"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; preload"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"645bf30b01598b8ebaf741c8\",\n    \"badges\": {\n        \"attachmentsByType\": {\n            \"trello\": {\n                \"board\": 0,\n                \"card\": 0\n            }\n        },\n        \"location\": false,\n        \"votes\": 0,\n        \"viewingMemberVoted\": false,\n        \"subscribed\": false,\n        \"fogbugz\": \"\",\n        \"checkItems\": 0,\n        \"checkItemsChecked\": 0,\n        \"checkItemsEarliestDue\": null,\n        \"comments\": 0,\n        \"attachments\": 0,\n        \"description\": true,\n        \"due\": null,\n        \"dueComplete\": false,\n        \"start\": null\n    },\n    \"checkItemStates\": [],\n    \"closed\": false,\n    \"dueComplete\": false,\n    \"dateLastActivity\": \"2023-05-13T19:04:15.664Z\",\n    \"desc\": \"test moble sirve para testear la actividad y funcionalidad de tu cellphone\",\n    \"descData\": {\n        \"emoji\": {}\n    },\n    \"due\": null,\n    \"dueReminder\": null,\n    \"email\": null,\n    \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n    \"idChecklists\": [],\n    \"idList\": \"645bf2de5787a69cefc4dc8c\",\n    \"idMembers\": [],\n    \"idMembersVoted\": [],\n    \"idShort\": 1,\n    \"idAttachmentCover\": null,\n    \"labels\": [\n        {\n            \"id\": \"645bf27d1ef89e53923cc99a\",\n            \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n            \"name\": \"\",\n            \"color\": \"purple\"\n        },\n        {\n            \"id\": \"645bf27d1ef89e53923cc99d\",\n            \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n            \"name\": \"\",\n            \"color\": \"red\"\n        },\n        {\n            \"id\": \"645bf27d1ef89e53923cc992\",\n            \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n            \"name\": \"\",\n            \"color\": \"green\"\n        }\n    ],\n    \"idLabels\": [\n        \"645bf27d1ef89e53923cc99a\",\n        \"645bf27d1ef89e53923cc99d\",\n        \"645bf27d1ef89e53923cc992\"\n    ],\n    \"manualCoverAttachment\": false,\n    \"name\": \"1. CARD MOBILE\",\n    \"pos\": 65535,\n    \"shortLink\": \"Mx3PeI2V\",\n    \"shortUrl\": \"https://trello.com/c/Mx3PeI2V\",\n    \"start\": null,\n    \"subscribed\": false,\n    \"url\": \"https://trello.com/c/Mx3PeI2V/1-1-card-mobile\",\n    \"cover\": {\n        \"idAttachment\": null,\n        \"color\": null,\n        \"idUploadedBackground\": null,\n        \"size\": \"normal\",\n        \"brightness\": \"dark\",\n        \"idPlugin\": null\n    },\n    \"isTemplate\": false,\n    \"cardRole\": null\n}"
						}
					]
				},
				{
					"name": "TC GET CARD C",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that CardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": [
						{
							"name": "TTC GET CARD",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://api.trello.com/1/cards/645bf30b01598b8ebaf741c8?key={{NewKey}}&token={{NewToken}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards",
										"645bf30b01598b8ebaf741c8"
									],
									"query": [
										{
											"key": "key",
											"value": "{{NewKey}}"
										},
										{
											"key": "token",
											"value": "{{NewToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 13 May 2023 19:14:57 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1527"
								},
								{
									"key": "X-Dns-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "Expect-Ct",
									"value": "max-age=0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "Surrogate-Control",
									"value": "no-store"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, must-revalidate, no-cache, no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "Thu, 01 Jan 1970 00:00:00"
								},
								{
									"key": "X-Trello-Version",
									"value": "1.209017.0"
								},
								{
									"key": "X-Trello-Environment",
									"value": "Production"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, PUT, POST, DELETE"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Accept, Content-Type"
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "x-rate-limit-api-key-interval-ms, x-rate-limit-api-key-max, x-rate-limit-api-key-remaining, x-rate-limit-api-token-interval-ms, x-rate-limit-api-token-max, x-rate-limit-api-token-remaining"
								},
								{
									"key": "X-Rate-Limit-Api-Token-Interval-Ms",
									"value": "10000"
								},
								{
									"key": "X-Rate-Limit-Api-Token-Max",
									"value": "100"
								},
								{
									"key": "X-Rate-Limit-Api-Token-Remaining",
									"value": "99"
								},
								{
									"key": "X-Rate-Limit-Db-Query-Time-Interval-Ms",
									"value": "600000"
								},
								{
									"key": "X-Rate-Limit-Db-Query-Time-Max",
									"value": "7200000"
								},
								{
									"key": "X-Rate-Limit-Db-Query-Time-Remaining",
									"value": "7199990"
								},
								{
									"key": "X-Rate-Limit-Api-Key-Interval-Ms",
									"value": "10000"
								},
								{
									"key": "X-Rate-Limit-Api-Key-Max",
									"value": "300"
								},
								{
									"key": "X-Rate-Limit-Api-Key-Remaining",
									"value": "299"
								},
								{
									"key": "X-Rate-Limit-Member-Interval-Ms",
									"value": "10000"
								},
								{
									"key": "X-Rate-Limit-Member-Max",
									"value": "375"
								},
								{
									"key": "X-Rate-Limit-Member-Remaining",
									"value": "374"
								},
								{
									"key": "Set-Cookie",
									"value": "preAuthProps=s%3A62d5c433f15678138d40a1e3%3AisEnterpriseAdmin%3Dfalse.4fjBiDE3JGdJqvj5gcBDcPir8EuYLOxgxmcHv%2FzY9Ks; Path=/; HttpOnly"
								},
								{
									"key": "X-Server-Time",
									"value": "1684005297008"
								},
								{
									"key": "Server",
									"value": "AtlassianEdge"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Atl-Traceid",
									"value": "8df7062544387635"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\": [{\"url\": \"https://dz8aopenkvv6s.cloudfront.net\"}], \"group\": \"endpoint-1\", \"include_subdomains\": true, \"max_age\": 600}"
								},
								{
									"key": "Nel",
									"value": "{\"failure_fraction\": 0.001, \"include_subdomains\": true, \"max_age\": 600, \"report_to\": \"endpoint-1\"}"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; preload"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"645bf30b01598b8ebaf741c8\",\n    \"badges\": {\n        \"attachmentsByType\": {\n            \"trello\": {\n                \"board\": 0,\n                \"card\": 0\n            }\n        },\n        \"location\": false,\n        \"votes\": 0,\n        \"viewingMemberVoted\": false,\n        \"subscribed\": false,\n        \"fogbugz\": \"\",\n        \"checkItems\": 0,\n        \"checkItemsChecked\": 0,\n        \"checkItemsEarliestDue\": null,\n        \"comments\": 0,\n        \"attachments\": 0,\n        \"description\": true,\n        \"due\": null,\n        \"dueComplete\": false,\n        \"start\": null\n    },\n    \"checkItemStates\": [],\n    \"closed\": false,\n    \"dueComplete\": false,\n    \"dateLastActivity\": \"2023-05-13T19:04:15.664Z\",\n    \"desc\": \"test moble sirve para testear la actividad y funcionalidad de tu cellphone\",\n    \"descData\": {\n        \"emoji\": {}\n    },\n    \"due\": null,\n    \"dueReminder\": null,\n    \"email\": null,\n    \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n    \"idChecklists\": [],\n    \"idList\": \"645bf2de5787a69cefc4dc8c\",\n    \"idMembers\": [],\n    \"idMembersVoted\": [],\n    \"idShort\": 1,\n    \"idAttachmentCover\": null,\n    \"labels\": [\n        {\n            \"id\": \"645bf27d1ef89e53923cc99a\",\n            \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n            \"name\": \"\",\n            \"color\": \"purple\"\n        },\n        {\n            \"id\": \"645bf27d1ef89e53923cc99d\",\n            \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n            \"name\": \"\",\n            \"color\": \"red\"\n        },\n        {\n            \"id\": \"645bf27d1ef89e53923cc992\",\n            \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n            \"name\": \"\",\n            \"color\": \"green\"\n        }\n    ],\n    \"idLabels\": [\n        \"645bf27d1ef89e53923cc99a\",\n        \"645bf27d1ef89e53923cc99d\",\n        \"645bf27d1ef89e53923cc992\"\n    ],\n    \"manualCoverAttachment\": false,\n    \"name\": \"1. CARD MOBILE\",\n    \"pos\": 65535,\n    \"shortLink\": \"Mx3PeI2V\",\n    \"shortUrl\": \"https://trello.com/c/Mx3PeI2V\",\n    \"start\": null,\n    \"subscribed\": false,\n    \"url\": \"https://trello.com/c/Mx3PeI2V/1-1-card-mobile\",\n    \"cover\": {\n        \"idAttachment\": null,\n        \"color\": null,\n        \"idUploadedBackground\": null,\n        \"size\": \"normal\",\n        \"brightness\": \"dark\",\n        \"idPlugin\": null\n    },\n    \"isTemplate\": false,\n    \"cardRole\": null\n}"
						}
					]
				},
				{
					"name": "TC GET CARD SINTAXIS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that CardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"  pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": [
						{
							"name": "TTC GET CARD",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://api.trello.com/1/cards/645bf30b01598b8ebaf741c8?key={{NewKey}}&token={{NewToken}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards",
										"645bf30b01598b8ebaf741c8"
									],
									"query": [
										{
											"key": "key",
											"value": "{{NewKey}}"
										},
										{
											"key": "token",
											"value": "{{NewToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 13 May 2023 19:14:57 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1527"
								},
								{
									"key": "X-Dns-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "Expect-Ct",
									"value": "max-age=0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "Surrogate-Control",
									"value": "no-store"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, must-revalidate, no-cache, no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "Thu, 01 Jan 1970 00:00:00"
								},
								{
									"key": "X-Trello-Version",
									"value": "1.209017.0"
								},
								{
									"key": "X-Trello-Environment",
									"value": "Production"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, PUT, POST, DELETE"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Accept, Content-Type"
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "x-rate-limit-api-key-interval-ms, x-rate-limit-api-key-max, x-rate-limit-api-key-remaining, x-rate-limit-api-token-interval-ms, x-rate-limit-api-token-max, x-rate-limit-api-token-remaining"
								},
								{
									"key": "X-Rate-Limit-Api-Token-Interval-Ms",
									"value": "10000"
								},
								{
									"key": "X-Rate-Limit-Api-Token-Max",
									"value": "100"
								},
								{
									"key": "X-Rate-Limit-Api-Token-Remaining",
									"value": "99"
								},
								{
									"key": "X-Rate-Limit-Db-Query-Time-Interval-Ms",
									"value": "600000"
								},
								{
									"key": "X-Rate-Limit-Db-Query-Time-Max",
									"value": "7200000"
								},
								{
									"key": "X-Rate-Limit-Db-Query-Time-Remaining",
									"value": "7199990"
								},
								{
									"key": "X-Rate-Limit-Api-Key-Interval-Ms",
									"value": "10000"
								},
								{
									"key": "X-Rate-Limit-Api-Key-Max",
									"value": "300"
								},
								{
									"key": "X-Rate-Limit-Api-Key-Remaining",
									"value": "299"
								},
								{
									"key": "X-Rate-Limit-Member-Interval-Ms",
									"value": "10000"
								},
								{
									"key": "X-Rate-Limit-Member-Max",
									"value": "375"
								},
								{
									"key": "X-Rate-Limit-Member-Remaining",
									"value": "374"
								},
								{
									"key": "Set-Cookie",
									"value": "preAuthProps=s%3A62d5c433f15678138d40a1e3%3AisEnterpriseAdmin%3Dfalse.4fjBiDE3JGdJqvj5gcBDcPir8EuYLOxgxmcHv%2FzY9Ks; Path=/; HttpOnly"
								},
								{
									"key": "X-Server-Time",
									"value": "1684005297008"
								},
								{
									"key": "Server",
									"value": "AtlassianEdge"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Atl-Traceid",
									"value": "8df7062544387635"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\": [{\"url\": \"https://dz8aopenkvv6s.cloudfront.net\"}], \"group\": \"endpoint-1\", \"include_subdomains\": true, \"max_age\": 600}"
								},
								{
									"key": "Nel",
									"value": "{\"failure_fraction\": 0.001, \"include_subdomains\": true, \"max_age\": 600, \"report_to\": \"endpoint-1\"}"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; preload"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"645bf30b01598b8ebaf741c8\",\n    \"badges\": {\n        \"attachmentsByType\": {\n            \"trello\": {\n                \"board\": 0,\n                \"card\": 0\n            }\n        },\n        \"location\": false,\n        \"votes\": 0,\n        \"viewingMemberVoted\": false,\n        \"subscribed\": false,\n        \"fogbugz\": \"\",\n        \"checkItems\": 0,\n        \"checkItemsChecked\": 0,\n        \"checkItemsEarliestDue\": null,\n        \"comments\": 0,\n        \"attachments\": 0,\n        \"description\": true,\n        \"due\": null,\n        \"dueComplete\": false,\n        \"start\": null\n    },\n    \"checkItemStates\": [],\n    \"closed\": false,\n    \"dueComplete\": false,\n    \"dateLastActivity\": \"2023-05-13T19:04:15.664Z\",\n    \"desc\": \"test moble sirve para testear la actividad y funcionalidad de tu cellphone\",\n    \"descData\": {\n        \"emoji\": {}\n    },\n    \"due\": null,\n    \"dueReminder\": null,\n    \"email\": null,\n    \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n    \"idChecklists\": [],\n    \"idList\": \"645bf2de5787a69cefc4dc8c\",\n    \"idMembers\": [],\n    \"idMembersVoted\": [],\n    \"idShort\": 1,\n    \"idAttachmentCover\": null,\n    \"labels\": [\n        {\n            \"id\": \"645bf27d1ef89e53923cc99a\",\n            \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n            \"name\": \"\",\n            \"color\": \"purple\"\n        },\n        {\n            \"id\": \"645bf27d1ef89e53923cc99d\",\n            \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n            \"name\": \"\",\n            \"color\": \"red\"\n        },\n        {\n            \"id\": \"645bf27d1ef89e53923cc992\",\n            \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n            \"name\": \"\",\n            \"color\": \"green\"\n        }\n    ],\n    \"idLabels\": [\n        \"645bf27d1ef89e53923cc99a\",\n        \"645bf27d1ef89e53923cc99d\",\n        \"645bf27d1ef89e53923cc992\"\n    ],\n    \"manualCoverAttachment\": false,\n    \"name\": \"1. CARD MOBILE\",\n    \"pos\": 65535,\n    \"shortLink\": \"Mx3PeI2V\",\n    \"shortUrl\": \"https://trello.com/c/Mx3PeI2V\",\n    \"start\": null,\n    \"subscribed\": false,\n    \"url\": \"https://trello.com/c/Mx3PeI2V/1-1-card-mobile\",\n    \"cover\": {\n        \"idAttachment\": null,\n        \"color\": null,\n        \"idUploadedBackground\": null,\n        \"size\": \"normal\",\n        \"brightness\": \"dark\",\n        \"idPlugin\": null\n    },\n    \"isTemplate\": false,\n    \"cardRole\": null\n}"
						}
					]
				},
				{
					"name": "TC GET CARD EXPEQL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that CardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate that object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": [
						{
							"name": "TTC GET CARD",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://api.trello.com/1/cards/645bf30b01598b8ebaf741c8?key={{NewKey}}&token={{NewToken}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards",
										"645bf30b01598b8ebaf741c8"
									],
									"query": [
										{
											"key": "key",
											"value": "{{NewKey}}"
										},
										{
											"key": "token",
											"value": "{{NewToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 13 May 2023 19:14:57 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1527"
								},
								{
									"key": "X-Dns-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "Expect-Ct",
									"value": "max-age=0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "Surrogate-Control",
									"value": "no-store"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, must-revalidate, no-cache, no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "Thu, 01 Jan 1970 00:00:00"
								},
								{
									"key": "X-Trello-Version",
									"value": "1.209017.0"
								},
								{
									"key": "X-Trello-Environment",
									"value": "Production"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, PUT, POST, DELETE"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Accept, Content-Type"
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "x-rate-limit-api-key-interval-ms, x-rate-limit-api-key-max, x-rate-limit-api-key-remaining, x-rate-limit-api-token-interval-ms, x-rate-limit-api-token-max, x-rate-limit-api-token-remaining"
								},
								{
									"key": "X-Rate-Limit-Api-Token-Interval-Ms",
									"value": "10000"
								},
								{
									"key": "X-Rate-Limit-Api-Token-Max",
									"value": "100"
								},
								{
									"key": "X-Rate-Limit-Api-Token-Remaining",
									"value": "99"
								},
								{
									"key": "X-Rate-Limit-Db-Query-Time-Interval-Ms",
									"value": "600000"
								},
								{
									"key": "X-Rate-Limit-Db-Query-Time-Max",
									"value": "7200000"
								},
								{
									"key": "X-Rate-Limit-Db-Query-Time-Remaining",
									"value": "7199990"
								},
								{
									"key": "X-Rate-Limit-Api-Key-Interval-Ms",
									"value": "10000"
								},
								{
									"key": "X-Rate-Limit-Api-Key-Max",
									"value": "300"
								},
								{
									"key": "X-Rate-Limit-Api-Key-Remaining",
									"value": "299"
								},
								{
									"key": "X-Rate-Limit-Member-Interval-Ms",
									"value": "10000"
								},
								{
									"key": "X-Rate-Limit-Member-Max",
									"value": "375"
								},
								{
									"key": "X-Rate-Limit-Member-Remaining",
									"value": "374"
								},
								{
									"key": "Set-Cookie",
									"value": "preAuthProps=s%3A62d5c433f15678138d40a1e3%3AisEnterpriseAdmin%3Dfalse.4fjBiDE3JGdJqvj5gcBDcPir8EuYLOxgxmcHv%2FzY9Ks; Path=/; HttpOnly"
								},
								{
									"key": "X-Server-Time",
									"value": "1684005297008"
								},
								{
									"key": "Server",
									"value": "AtlassianEdge"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Atl-Traceid",
									"value": "8df7062544387635"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\": [{\"url\": \"https://dz8aopenkvv6s.cloudfront.net\"}], \"group\": \"endpoint-1\", \"include_subdomains\": true, \"max_age\": 600}"
								},
								{
									"key": "Nel",
									"value": "{\"failure_fraction\": 0.001, \"include_subdomains\": true, \"max_age\": 600, \"report_to\": \"endpoint-1\"}"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; preload"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"645bf30b01598b8ebaf741c8\",\n    \"badges\": {\n        \"attachmentsByType\": {\n            \"trello\": {\n                \"board\": 0,\n                \"card\": 0\n            }\n        },\n        \"location\": false,\n        \"votes\": 0,\n        \"viewingMemberVoted\": false,\n        \"subscribed\": false,\n        \"fogbugz\": \"\",\n        \"checkItems\": 0,\n        \"checkItemsChecked\": 0,\n        \"checkItemsEarliestDue\": null,\n        \"comments\": 0,\n        \"attachments\": 0,\n        \"description\": true,\n        \"due\": null,\n        \"dueComplete\": false,\n        \"start\": null\n    },\n    \"checkItemStates\": [],\n    \"closed\": false,\n    \"dueComplete\": false,\n    \"dateLastActivity\": \"2023-05-13T19:04:15.664Z\",\n    \"desc\": \"test moble sirve para testear la actividad y funcionalidad de tu cellphone\",\n    \"descData\": {\n        \"emoji\": {}\n    },\n    \"due\": null,\n    \"dueReminder\": null,\n    \"email\": null,\n    \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n    \"idChecklists\": [],\n    \"idList\": \"645bf2de5787a69cefc4dc8c\",\n    \"idMembers\": [],\n    \"idMembersVoted\": [],\n    \"idShort\": 1,\n    \"idAttachmentCover\": null,\n    \"labels\": [\n        {\n            \"id\": \"645bf27d1ef89e53923cc99a\",\n            \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n            \"name\": \"\",\n            \"color\": \"purple\"\n        },\n        {\n            \"id\": \"645bf27d1ef89e53923cc99d\",\n            \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n            \"name\": \"\",\n            \"color\": \"red\"\n        },\n        {\n            \"id\": \"645bf27d1ef89e53923cc992\",\n            \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n            \"name\": \"\",\n            \"color\": \"green\"\n        }\n    ],\n    \"idLabels\": [\n        \"645bf27d1ef89e53923cc99a\",\n        \"645bf27d1ef89e53923cc99d\",\n        \"645bf27d1ef89e53923cc992\"\n    ],\n    \"manualCoverAttachment\": false,\n    \"name\": \"1. CARD MOBILE\",\n    \"pos\": 65535,\n    \"shortLink\": \"Mx3PeI2V\",\n    \"shortUrl\": \"https://trello.com/c/Mx3PeI2V\",\n    \"start\": null,\n    \"subscribed\": false,\n    \"url\": \"https://trello.com/c/Mx3PeI2V/1-1-card-mobile\",\n    \"cover\": {\n        \"idAttachment\": null,\n        \"color\": null,\n        \"idUploadedBackground\": null,\n        \"size\": \"normal\",\n        \"brightness\": \"dark\",\n        \"idPlugin\": null\n    },\n    \"isTemplate\": false,\n    \"cardRole\": null\n}"
						}
					]
				},
				{
					"name": "TC GET CARD EXPEQL BIEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.response.json();\r",
									"pm.test(\"Deberia salir el dato esperado\",()=>{\r",
									" pm.expect(1+1).to.eql(2)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": [
						{
							"name": "TTC GET CARD",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://api.trello.com/1/cards/645bf30b01598b8ebaf741c8?key={{NewKey}}&token={{NewToken}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards",
										"645bf30b01598b8ebaf741c8"
									],
									"query": [
										{
											"key": "key",
											"value": "{{NewKey}}"
										},
										{
											"key": "token",
											"value": "{{NewToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 13 May 2023 19:14:57 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1527"
								},
								{
									"key": "X-Dns-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "Expect-Ct",
									"value": "max-age=0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "Surrogate-Control",
									"value": "no-store"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, must-revalidate, no-cache, no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "Thu, 01 Jan 1970 00:00:00"
								},
								{
									"key": "X-Trello-Version",
									"value": "1.209017.0"
								},
								{
									"key": "X-Trello-Environment",
									"value": "Production"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, PUT, POST, DELETE"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Accept, Content-Type"
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "x-rate-limit-api-key-interval-ms, x-rate-limit-api-key-max, x-rate-limit-api-key-remaining, x-rate-limit-api-token-interval-ms, x-rate-limit-api-token-max, x-rate-limit-api-token-remaining"
								},
								{
									"key": "X-Rate-Limit-Api-Token-Interval-Ms",
									"value": "10000"
								},
								{
									"key": "X-Rate-Limit-Api-Token-Max",
									"value": "100"
								},
								{
									"key": "X-Rate-Limit-Api-Token-Remaining",
									"value": "99"
								},
								{
									"key": "X-Rate-Limit-Db-Query-Time-Interval-Ms",
									"value": "600000"
								},
								{
									"key": "X-Rate-Limit-Db-Query-Time-Max",
									"value": "7200000"
								},
								{
									"key": "X-Rate-Limit-Db-Query-Time-Remaining",
									"value": "7199990"
								},
								{
									"key": "X-Rate-Limit-Api-Key-Interval-Ms",
									"value": "10000"
								},
								{
									"key": "X-Rate-Limit-Api-Key-Max",
									"value": "300"
								},
								{
									"key": "X-Rate-Limit-Api-Key-Remaining",
									"value": "299"
								},
								{
									"key": "X-Rate-Limit-Member-Interval-Ms",
									"value": "10000"
								},
								{
									"key": "X-Rate-Limit-Member-Max",
									"value": "375"
								},
								{
									"key": "X-Rate-Limit-Member-Remaining",
									"value": "374"
								},
								{
									"key": "Set-Cookie",
									"value": "preAuthProps=s%3A62d5c433f15678138d40a1e3%3AisEnterpriseAdmin%3Dfalse.4fjBiDE3JGdJqvj5gcBDcPir8EuYLOxgxmcHv%2FzY9Ks; Path=/; HttpOnly"
								},
								{
									"key": "X-Server-Time",
									"value": "1684005297008"
								},
								{
									"key": "Server",
									"value": "AtlassianEdge"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Atl-Traceid",
									"value": "8df7062544387635"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\": [{\"url\": \"https://dz8aopenkvv6s.cloudfront.net\"}], \"group\": \"endpoint-1\", \"include_subdomains\": true, \"max_age\": 600}"
								},
								{
									"key": "Nel",
									"value": "{\"failure_fraction\": 0.001, \"include_subdomains\": true, \"max_age\": 600, \"report_to\": \"endpoint-1\"}"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; preload"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"645bf30b01598b8ebaf741c8\",\n    \"badges\": {\n        \"attachmentsByType\": {\n            \"trello\": {\n                \"board\": 0,\n                \"card\": 0\n            }\n        },\n        \"location\": false,\n        \"votes\": 0,\n        \"viewingMemberVoted\": false,\n        \"subscribed\": false,\n        \"fogbugz\": \"\",\n        \"checkItems\": 0,\n        \"checkItemsChecked\": 0,\n        \"checkItemsEarliestDue\": null,\n        \"comments\": 0,\n        \"attachments\": 0,\n        \"description\": true,\n        \"due\": null,\n        \"dueComplete\": false,\n        \"start\": null\n    },\n    \"checkItemStates\": [],\n    \"closed\": false,\n    \"dueComplete\": false,\n    \"dateLastActivity\": \"2023-05-13T19:04:15.664Z\",\n    \"desc\": \"test moble sirve para testear la actividad y funcionalidad de tu cellphone\",\n    \"descData\": {\n        \"emoji\": {}\n    },\n    \"due\": null,\n    \"dueReminder\": null,\n    \"email\": null,\n    \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n    \"idChecklists\": [],\n    \"idList\": \"645bf2de5787a69cefc4dc8c\",\n    \"idMembers\": [],\n    \"idMembersVoted\": [],\n    \"idShort\": 1,\n    \"idAttachmentCover\": null,\n    \"labels\": [\n        {\n            \"id\": \"645bf27d1ef89e53923cc99a\",\n            \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n            \"name\": \"\",\n            \"color\": \"purple\"\n        },\n        {\n            \"id\": \"645bf27d1ef89e53923cc99d\",\n            \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n            \"name\": \"\",\n            \"color\": \"red\"\n        },\n        {\n            \"id\": \"645bf27d1ef89e53923cc992\",\n            \"idBoard\": \"645bf27d235efdd4e31bb4c9\",\n            \"name\": \"\",\n            \"color\": \"green\"\n        }\n    ],\n    \"idLabels\": [\n        \"645bf27d1ef89e53923cc99a\",\n        \"645bf27d1ef89e53923cc99d\",\n        \"645bf27d1ef89e53923cc992\"\n    ],\n    \"manualCoverAttachment\": false,\n    \"name\": \"1. CARD MOBILE\",\n    \"pos\": 65535,\n    \"shortLink\": \"Mx3PeI2V\",\n    \"shortUrl\": \"https://trello.com/c/Mx3PeI2V\",\n    \"start\": null,\n    \"subscribed\": false,\n    \"url\": \"https://trello.com/c/Mx3PeI2V/1-1-card-mobile\",\n    \"cover\": {\n        \"idAttachment\": null,\n        \"color\": null,\n        \"idUploadedBackground\": null,\n        \"size\": \"normal\",\n        \"brightness\": \"dark\",\n        \"idPlugin\": null\n    },\n    \"isTemplate\": false,\n    \"cardRole\": null\n}"
						}
					]
				}
			]
		},
		{
			"name": "TEST CASE CARD",
			"item": [
				{
					"name": "TC GET CARD FIRST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperado del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status code\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that CardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable card\", function () {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.json().cards).to.eql(pm.environment.get(\"cards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"645bf30b01598b8ebaf741c8\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.text(\"card_id\")).to.include(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CARD CHECKITEMSTATES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperado del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Validate the cards CheckitemId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"  pm.expect(responseJson.id).to.eql(\"646ff23a68931f12a062ab0d\")\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"    //parse response test properties\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable card\", function () {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.json().cards).to.eql(pm.environment.get(\"cards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.text(\"checkItem_id\")).to.include(\"646ff23a68931f12a062ab0d\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id//checkItemStates?key={{NewKey}}&token={{NewToken}}&all=all",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id",
								"",
								"checkItemStates"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "all",
									"value": "all"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT CARD CHECKITEMS UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"  pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id/checkItem/:idCheckItem?key={{NewKey}}&token={{NewToken}}&all=all&state=incomplete",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id",
								"checkItem",
								":idCheckItem"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "all",
									"value": "all"
								},
								{
									"key": "state",
									"value": "incomplete"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								},
								{
									"key": "idCheckItem",
									"value": "6463fea928258a1334a9beec"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CARD CHECKLIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperado del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Card Checklist ID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"6463fdd5112a96b0b3c82086\");\r",
									"    });\r",
									"    \r",
									"pm.test(\"Validate that object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"  pm.test(\"Content-Type header is present\", () => {\r",
									"      //parse the response JSON and test properties\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate response property matches environment variable card\", function () {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.json().cards).to.eql(pm.environment.get(\"cards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.text(\"checklist_id\")).to.include(\"6463fdd5112a96b0b3c82086\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id/checklists?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id",
								"checklists"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CARD LIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperado del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Card ListId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf2de5787a69cefc4dc8c\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"    pm.test(\"Content-Type header is present\", () => {\r",
									"        //parse the response JSON and test properties\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable card\", function () {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.json().cards).to.eql(pm.environment.get(\"cards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1700ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1600);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.text(\"list_id\")).to.include(\"645bf2de5787a69cefc4dc8c\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id/list?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id",
								"list"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CARD MEMBERS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperado del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"  \r",
									"pm.test(\"Validate that CardMemberId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"62d5c433f15678138d40a1e3\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"    pm.test(\"Content-Type header is present\", () => {\r",
									"    //parse response test properties\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable card\", function () {\r",
									"    //response the properties of the test and the environment\r",
									"  pm.expect(pm.response.json().cards).to.eql(pm.environment.get(\"cards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1200);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.text(\"members_id\")).to.include(\"62d5c433f15678138d40a1e3\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id/members?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id",
								"members"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CARD MEMBERSVOTED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"  \r",
									"pm.test(\"Validate that CardMemberId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"62d5c433f15678138d40a1e3\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"    //response the properties of the type header\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable card\", function () {\r",
									"    //response the properties the teste of the variable\r",
									"  pm.expect(pm.response.json().cards).to.eql(pm.environment.get(\"cards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.text(\"members_id\")).to.include(\"62d5c433f15678138d40a1e3\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id/membersVoted?key={{NewKey}}&token={{NewToken}}&voted=yes",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id",
								"membersVoted"
							],
							"query": [
								{
									"key": "value",
									"value": "63489c9a73cb2c007604b11d",
									"disabled": true
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "voted",
									"value": "yes"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CARD PLUGINDATA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperado del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that CardPlugindataID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"6469162414993cea718b1b7b\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"    pm.test(\"Content-Type header is present\", () => {\r",
									"        //parse response the test properties header\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable card\", function () {\r",
									"    //response the test properties variables\r",
									"  pm.expect(pm.response.json().cards).to.eql(pm.environment.get(\"cards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.text(\"pluginData_id\")).to.include(\"6469162414993cea718b1b7b\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id/pluginData?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id",
								"pluginData"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST CARD STICKERS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"  \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id/stickers?key={{NewKey}}&token={{NewToken}}&image=taco-cool&top=100&left=60&zIndex=80",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id",
								"stickers"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "image",
									"value": "taco-cool"
								},
								{
									"key": "top",
									"value": "100"
								},
								{
									"key": "left",
									"value": "60"
								},
								{
									"key": "zIndex",
									"value": "80"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT CARD STICKERS UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"  pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id/stickers/:idSticker?key={{NewKey}}&token={{NewToken}}&image=kiss&top=100&left=60&zIndex=80",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id",
								"stickers",
								":idSticker"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "image",
									"value": "kiss"
								},
								{
									"key": "top",
									"value": "100"
								},
								{
									"key": "left",
									"value": "60"
								},
								{
									"key": "zIndex",
									"value": "80"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								},
								{
									"key": "idSticker",
									"value": "64642e646109a8717c84a7e4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CARD STICKERS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that CardStickersID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"64642e646109a8717c84a7e4\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"    pm.test(\"Content-Type header is present\", () => {\r",
									"        //parse response the test type header\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable card\", function () {\r",
									"    //parse response the properties test variables\r",
									"  pm.expect(pm.response.json().cards).to.eql(pm.environment.get(\"cards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.text(\"sticker_id\")).to.include(\"64642e646109a8717c84a7e4\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id/stickers/:idSticker?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id",
								"stickers",
								":idSticker"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "image",
									"value": "taco-cool",
									"disabled": true
								},
								{
									"key": "top",
									"value": "100",
									"disabled": true
								},
								{
									"key": "left",
									"value": "60",
									"disabled": true
								},
								{
									"key": "zIndex",
									"value": "80",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								},
								{
									"key": "idSticker",
									"value": "64642e646109a8717c84a7e4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CARD BOARD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that CardBoardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf27d235efdd4e31bb4c9\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"    pm.test(\"Content-Type header is present\", () => {\r",
									"        //parse response the test type header \r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable card\", function () {\r",
									"    //parse response the test enviroment\r",
									"  pm.expect(pm.response.json().cards).to.eql(pm.environment.get(\"cards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1700);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.text(\"board_id\")).to.include(\"645bf27d235efdd4e31bb4c9\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id/board?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id",
								"board"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CARD CUSTOMFIELD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that CardCustomfieldID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"  pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable card\", function () {\r",
									"    //parse response the test variables\r",
									"  pm.expect(pm.response.json().cards).to.eql(pm.environment.get(\"cards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.text(\"customfield_id\")).to.include(\"61c9a684252baf6cc7dafa3f\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id/customFieldItems?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id",
								"customFieldItems"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CARD LABELS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that CardLabelId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"646cee3622b2b933abb99c37\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"    pm.test(\"Content-Type header is present\", () => {\r",
									"        //parse and response the test properties\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable card\", function () {\r",
									"    //parse and response the test properties\r",
									"  pm.expect(pm.response.json().cards).to.eql(pm.environment.get(\"cards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1600);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.text(\"label_id\")).to.include(\"646cee3622b2b933abb99c37\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id/labels?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id",
								"labels"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CARD ACTIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that CardActionsID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"646fec3509c86194497fb621\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"     pm.test(\"Content-Type header is present\", () => {\r",
									"         //parse response the test properties\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable card\", function () {\r",
									"    //parse and response the test properties \r",
									"  pm.expect(pm.response.json().cards).to.eql(pm.environment.get(\"cards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1700);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.text(\"actions_id\")).to.include(\"646fec3509c86194497fb621\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id/actions?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id",
								"actions"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT CARD ACTIONS COMMENTS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id/actions/:idAction/comments?text=Love myself&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id",
								"actions",
								":idAction",
								"comments"
							],
							"query": [
								{
									"key": "text",
									"value": "Love myself"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								},
								{
									"key": "idAction",
									"value": "646427923d661fd204e8167d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CARD FIELD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Card Short URL\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.shortUrl).to.eql(\"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"     pm.test(\"Content-Type header is present\", () => {\r",
									"         //parse and response the test properties\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable card\", function () {\r",
									"    //parse and response the test properties\r",
									"  pm.expect(pm.response.json().cards).to.eql(pm.environment.get(\"cards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.text(\"actions_id\")).to.include(\"646fec3509c86194497fb621\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id/shortUrl?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id",
								"shortUrl"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT NEW CARD UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id?key={{NewKey}}&token={{NewToken}}&name=NEW CARD UPDATE&desc=Esta tarjeta se actualizo",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "name",
									"value": "NEW CARD UPDATE"
								},
								{
									"key": "desc",
									"value": "Esta tarjeta se actualizo"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64637cf19d7490de46ca2bbd"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST NEW CARD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"  \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}?key={{NewKey}}&token={{NewToken}}&idList=645bf2de5787a69cefc4dc8c&name=NEW CARD&desc=Est carta se utilizara para realizar test case ",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "idList",
									"value": "645bf2de5787a69cefc4dc8c"
								},
								{
									"key": "name",
									"value": "NEW CARD"
								},
								{
									"key": "desc",
									"value": "Est carta se utilizara para realizar test case "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST CARD ATTACHMENTS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"  \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}/:id/attachments?key={{NewKey}}&token={{NewToken}}&url=https://red-moon-341121.postman.co/workspace/TESTING-MOBILE~1f8bffd6-ee30-48d4-815e-f043a82ae198/request/22975178-1e79c526-c130-4fbb-9f1a-a805e703dc54",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}",
								":id",
								"attachments"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "url",
									"value": "https://red-moon-341121.postman.co/workspace/TESTING-MOBILE~1f8bffd6-ee30-48d4-815e-f043a82ae198/request/22975178-1e79c526-c130-4fbb-9f1a-a805e703dc54"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST CASE BOARD",
			"item": [
				{
					"name": "TC GET BOARD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that BoardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf27d235efdd4e31bb4c9\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"       pm.test(\"Content-Type header is present\", () => {\r",
									"        //parse and response the test properties \r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable board\", function () {\r",
									"    //parse and response the test properties\r",
									"  pm.expect(pm.response.json().board).to.eql(pm.environment.get(\"boards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.text(\"board_id\")).to.include(\"645bf27d235efdd4e31bb4c9\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET BOARD MEMBERSHIP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Board MembershipID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf27d235efdd4e31bb4d1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"    //parse and response the test properties \r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable board\", function () {\r",
									"    //parse and response the test propieties\r",
									"  pm.expect(pm.response.json().board).to.eql(pm.environment.get(\"boards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1700);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\",() => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.text(\"membership_id\")).to.include(\"645bf27d235efdd4e31bb4d1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/memberships?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"memberships"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT BOARD MEMBERSHIP OF MEMBER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/memberships/:idMemberships?type=normal&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"memberships",
								":idMemberships"
							],
							"query": [
								{
									"key": "type",
									"value": "normal"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								},
								{
									"key": "idMemberships",
									"value": "646411b574fcb7e3f9526214"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT BOARD MYPREFS EMAIL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/myPrefs/emailPosition?value=top&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"myPrefs",
								"emailPosition"
							],
							"query": [
								{
									"key": "value",
									"value": "top"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT BOARD MYPREFS EMAIL LIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/myPrefs/idEmailList?value=645bf2de5787a69cefc4dc8c&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"myPrefs",
								"idEmailList"
							],
							"query": [
								{
									"key": "value",
									"value": "645bf2de5787a69cefc4dc8c"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST BOARD EMAIL KEY GENERATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"  \r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/emailKey/generate?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"emailKey",
								"generate"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET BOARD BOARDPLUGINS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Board PluginID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"6464293be2a3e5a9e2f8483a\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable board\", function () {\r",
									"  pm.expect(pm.response.json().board).to.eql(pm.environment.get(\"boards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/boardPlugins?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"boardPlugins"
							],
							"query": [
								{
									"key": "value",
									"value": "645bf2261afd933bd897792c",
									"disabled": true
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET BOARD PLUGINS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that BoardPluginsId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"55a5d917446f51777421000a\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable board\", function () {\r",
									"  pm.expect(pm.response.json().board).to.eql(pm.environment.get(\"boards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/plugins?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"plugins"
							],
							"query": [
								{
									"key": "value",
									"value": "645bf2261afd933bd897792c",
									"disabled": true
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET BOARD FIELD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Board OrganizationID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf2261afd933bd897792c\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable board\", function () {\r",
									"  pm.expect(pm.response.json().board).to.eql(pm.environment.get(\"boards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/idOrganization?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"idOrganization"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET BOARD ACTIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that BoardActionsID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"64e954485592330a3a269cc1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable board\", function () {\r",
									"  pm.expect(pm.response.json().board).to.eql(pm.environment.get(\"boards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/{{actions}}?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"{{actions}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET BOARD CARDS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that BoardCardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable board\", function () {\r",
									"  pm.expect(pm.response.json().board).to.eql(pm.environment.get(\"boards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1700);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"645bf30b01598b8ebaf741c8\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/{{cards}}?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"{{cards}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET BOARD CARD ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Board CardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable board\", function () {\r",
									"  pm.expect(pm.response.json().board).to.eql(pm.environment.get(\"boards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/{{cards}}/:idCard?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"{{cards}}",
								":idCard"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								},
								{
									"key": "idCard",
									"value": "645bf30b01598b8ebaf741c8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET BOARD BOARDSTARS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that BoardsID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"648d0f64b173bb9d25cca72c\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable board\", function () {\r",
									"  pm.expect(pm.response.json().board).to.eql(pm.environment.get(\"boards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"648d0f64b173bb9d25cca72c\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/boardStars?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"boardStars"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET BOARD CHECKLISTS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that BoardChecklistID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"6463fdd5112a96b0b3c82086\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable board\", function () {\r",
									"  pm.expect(pm.response.json().board).to.eql(pm.environment.get(\"boards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"6463fdd5112a96b0b3c82086\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/checklists?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"checklists"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET BOARD CARDS FILTER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that BoardCardsAllId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable board\", function () {\r",
									"  pm.expect(pm.response.json().board).to.eql(pm.environment.get(\"boards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"645bf30b01598b8ebaf741c8\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/{{cards}}/all?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"{{cards}}",
								"all"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET BOARD CUSTOMFIELDS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that CardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable board\", function () {\r",
									"  pm.expect(pm.response.json().board).to.eql(pm.environment.get(\"boards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1700);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/customFields?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"customFields"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET BOARD LABELS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Board LabelID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"64655166af9b6425c7e3ffac\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable board\", function () {\r",
									"  pm.expect(pm.response.json().board).to.eql(pm.environment.get(\"boards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/{{labels}}?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"{{labels}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST BOARD LABELS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"  \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/{{labels}}?name=god&color=blue&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"{{labels}}"
							],
							"query": [
								{
									"key": "name",
									"value": "god"
								},
								{
									"key": "color",
									"value": "blue"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST BOARD LIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/{{lists}}?name=DIOSITO&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"{{lists}}"
							],
							"query": [
								{
									"key": "name",
									"value": "DIOSITO"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET BOARD LISTS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Board ListID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf2de5787a69cefc4dc8c\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable board\", function () {\r",
									"  pm.expect(pm.response.json().board).to.eql(pm.environment.get(\"boards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/{{lists}}?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"{{lists}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET BOARD LISTS FILTER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that CardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf2de5787a69cefc4dc8c\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable board\", function () {\r",
									"  pm.expect(pm.response.json().board).to.eql(pm.environment.get(\"boards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/{{lists}}/all?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"{{lists}}",
								"all"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET BOARD MEMBERS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Board MemberID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"62d5c433f15678138d40a1e3\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable board\", function () {\r",
									"  pm.expect(pm.response.json().board).to.eql(pm.environment.get(\"boards\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/{{members}}?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"{{members}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT BOARD MEMBERS INVITE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/{{members}}?email=rebecavv_mena_6@hotmail.com&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"{{members}}"
							],
							"query": [
								{
									"key": "email",
									"value": "rebecavv_mena_6@hotmail.com"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT BOARD MEMBERS ADD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id/{{members}}/:idMember?type=normal&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id",
								"{{members}}",
								":idMember"
							],
							"query": [
								{
									"key": "type",
									"value": "normal"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								},
								{
									"key": "idMember",
									"value": "63489c9a73cb2c007604b11d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT BOARD UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{boards}}/:id?key={{NewKey}}&token={{NewToken}}&name=BOARD MOBILE",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{boards}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "name",
									"value": "BOARD MOBILE"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST CASE ACTIONS",
			"item": [
				{
					"name": "TC GET ACTIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that ActionID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"64655e8f3c42eeac916773ba\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable action\", function () {\r",
									"  pm.expect(pm.response.json().action).to.eql(pm.environment.get(\"actions\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1700);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{actions}}/:id?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{actions}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64655e8f3c42eeac916773ba"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ACTIONS FIELD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Card DisplayID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"61c9a684252baf6cc7dafa3f\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable action\", function () {\r",
									"  pm.expect(pm.response.json().action).to.eql(pm.environment.get(\"actions\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{actions}}/:id/display?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{actions}}",
								":id",
								"display"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64655e8f3c42eeac916773ba"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ACTIONS BOARD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Action BoardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf27d235efdd4e31bb4c9\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable action\", function () {\r",
									"  pm.expect(pm.response.json().action).to.eql(pm.environment.get(\"actions\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1700);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{actions}}/:id/board?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{actions}}",
								":id",
								"board"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64655e8f3c42eeac916773ba"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ACTIONS CARD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Action CardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable action\", function () {\r",
									"  pm.expect(pm.response.json().action).to.eql(pm.environment.get(\"actions\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{actions}}/:id/card?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{actions}}",
								":id",
								"card"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64655e8f3c42eeac916773ba"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ACTIONS LIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Action ListID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf2de5787a69cefc4dc8c\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable action\", function () {\r",
									"  pm.expect(pm.response.json().action).to.eql(pm.environment.get(\"actions\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{actions}}/:id/list?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{actions}}",
								":id",
								"list"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64655e8f3c42eeac916773ba"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ACTIONS MEMBERCREATOR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Action MemberID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"62d5c433f15678138d40a1e3\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable action\", function () {\r",
									"  pm.expect(pm.response.json().action).to.eql(pm.environment.get(\"actions\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{actions}}/:id/memberCreator?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{actions}}",
								":id",
								"memberCreator"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64655e8f3c42eeac916773ba"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ACTIONS REACTIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that ActionReactionID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"6466b2540af8f199ae5f439c\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable action\", function () {\r",
									"  pm.expect(pm.response.json().action).to.eql(pm.environment.get(\"actions\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{actions}}/:id/reactions?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{actions}}",
								":id",
								"reactions"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64655e8f3c42eeac916773ba"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST ACTIONS REACTIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{actions}}/:id/reactions?key={{NewKey}}&token={{NewToken}}&shortName=angel",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{actions}}",
								":id",
								"reactions"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "shortName",
									"value": "angel"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64655e8f3c42eeac916773ba"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ACTIONS REACTIONS NEW",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable action\", function () {\r",
									"  pm.expect(pm.response.json().action).to.eql(pm.environment.get(\"actions\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"6466b2540af8f199ae5f439c\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{actions}}/:id/reactions?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{actions}}",
								":id",
								"reactions"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "shortName",
									"value": "angel",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64655e8f3c42eeac916773ba"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ACTIONS REACTIONS SUMARY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Action ReactionSumaryId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"6466b2540af8f199ae5f439c\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable action\", function () {\r",
									"  pm.expect(pm.response.json().action).to.eql(pm.environment.get(\"actions\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{actions}}/:id/reactionsSummary?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{actions}}",
								":id",
								"reactionsSummary"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "shortName",
									"value": "angel",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64655e8f3c42eeac916773ba"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT ACTIONS UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{actions}}/:id?text=DIOS ES BUENO&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{actions}}",
								":id"
							],
							"query": [
								{
									"key": "text",
									"value": "DIOS ES BUENO"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64655e8f3c42eeac916773ba"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST NEW ACTIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{cards}}?key={{NewKey}}&token={{NewToken}}&idList=645bf2de5787a69cefc4dc8c&name=NEW CARD&desc=Est carta se utilizara para realizar test case ",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{cards}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "idList",
									"value": "645bf2de5787a69cefc4dc8c"
								},
								{
									"key": "name",
									"value": "NEW CARD"
								},
								{
									"key": "desc",
									"value": "Est carta se utilizara para realizar test case "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST CASE EMOJI",
			"item": [
				{
					"name": "TC GET EMOJI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable emoji\", function () {\r",
									"  pm.expect(pm.response.json().emoji).to.eql(pm.environment.get(\"emoji\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/emoji",
							"host": [
								"{{dom}}"
							],
							"path": [
								"emoji"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}",
									"disabled": true
								},
								{
									"key": "token",
									"value": "{{NewToken}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET EMOJI  ASSERTIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.response.json();\r",
									"\r",
									"pm.test(\"Deberia salir el dato esperado\",()=>{\r",
									" pm.expect(1+1).to.eql(2)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/emoji",
							"host": [
								"{{dom}}"
							],
							"path": [
								"emoji"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}",
									"disabled": true
								},
								{
									"key": "token",
									"value": "{{NewToken}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET EMOJI  ASSERTIONS Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.response.json();\r",
									"\r",
									"pm.test(\"Deberia salir el dato esperado\",()=>{\r",
									"    pm.expect(pm.response.json()).to.eql()\r",
									"});\r",
									"console.log(pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/emoji",
							"host": [
								"{{dom}}"
							],
							"path": [
								"emoji"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}",
									"disabled": true
								},
								{
									"key": "token",
									"value": "{{NewToken}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET EMOJI  ASSERTIONS Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.response.json();\r",
									"\r",
									"pm.test(\"Deberia salir el dato esperado\",()=>{\r",
									"    pm.expect(pm.response.json()).to.eql()\r",
									"});\r",
									"console.log(pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/emoji",
							"host": [
								"{{dom}}"
							],
							"path": [
								"emoji"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}",
									"disabled": true
								},
								{
									"key": "token",
									"value": "{{NewToken}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET EMOJI  ASSERTIONS Copy 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response has all properties\", () => {\r",
									"    //parse the response JSON and test three properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.type).to.eql('vip');\r",
									"    pm.expect(responseJson.name).to.be.a('string');\r",
									"    pm.expect(responseJson.id).to.have.lengthOf(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/emoji",
							"host": [
								"{{dom}}"
							],
							"path": [
								"emoji"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}",
									"disabled": true
								},
								{
									"key": "token",
									"value": "{{NewToken}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST CASE CHECKITEM",
			"item": [
				{
					"name": "TC GET CHECKLIST N",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that ChecklistId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"64680cfb548750d9804f042c\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"       //response type header in request\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable checklist\", function () {\r",
									"    //response an access of environment variable\r",
									"  pm.expect(pm.response.json().checklist).to.eql(pm.environment.get(\"checklist\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{checklist}}/:id?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{checklist}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64680cfb548750d9804f042c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CHECKLIST CARD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that ChecklistCardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.equal(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"       //response type header in request\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable checklist\", function () {\r",
									"    //response an access of environment variable\r",
									"  pm.expect(pm.response.json().checklist).to.eql(pm.environment.get(\"checklist\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"645bf30b01598b8ebaf741c8\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{checklist}}/:id/cards?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{checklist}}",
								":id",
								"cards"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64680cfb548750d9804f042c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CHECKLIST BOARD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Checklist BoardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf27d235efdd4e31bb4c9\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"       //response type header in request\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable checklist\", function () {\r",
									"    //response an access of environment variable\r",
									"pm.expect(pm.response.json().checklist).to.eql(pm.environment.get(\"checklist\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{checklist}}/:id/board?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{checklist}}",
								":id",
								"board"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64680cfb548750d9804f042c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT CHECKLIST UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{checklist}}/:id?name=CHECKLIST UPDATE&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{checklist}}",
								":id"
							],
							"query": [
								{
									"key": "name",
									"value": "CHECKLIST UPDATE"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64680cfb548750d9804f042c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST CHECKLIST N",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{checklist}}?idCard=645bf30b01598b8ebaf741c8&name=NEW CHECKLIST&desc=Vivo en sobreabundancia&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{checklist}}"
							],
							"query": [
								{
									"key": "idCard",
									"value": "645bf30b01598b8ebaf741c8"
								},
								{
									"key": "name",
									"value": "NEW CHECKLIST"
								},
								{
									"key": "desc",
									"value": "Vivo en sobreabundancia"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST CHECKLIST CHECKITEM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{checklist}}/:id/checkItems?name=DIOSITO ES MUY BUENO&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{checklist}}",
								":id",
								"checkItems"
							],
							"query": [
								{
									"key": "name",
									"value": "DIOSITO ES MUY BUENO"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64680cfb548750d9804f042c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CHECKLIST CHECKITEM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Checklist CheckitemId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"646814d477b503accabc0004\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"       //parse the response type header \r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable checklist\", function () {\r",
									"    //response an access of environment variable\r",
									"  pm.expect(pm.response.json().checklist).to.eql(pm.environment.get(\"checklist\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string Not Found\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{checklist}}/:id/checkItems/:idChecklitem?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{checklist}}",
								":id",
								"checkItems",
								":idChecklitem"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64680cfb548750d9804f042c"
								},
								{
									"key": "idChecklitem",
									"value": "646814d477b503accabc0004"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CHECKLIST POS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that ChecklistPos\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.value).to.eql(\"49152\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"       //response conten type header\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable checklist\", function () {\r",
									"    //responnse property enviroment variable\r",
									"  pm.expect(pm.response.json().checklist).to.eql(pm.environment.get(\"checklist\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{checklist}}/:id/pos?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{checklist}}",
								":id",
								"pos"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64680cfb548750d9804f042c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT CHECKLIST FIELD UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{checklist}}/:id/name?value=DIVINIDAD&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{checklist}}",
								":id",
								"name"
							],
							"query": [
								{
									"key": "value",
									"value": "DIVINIDAD"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64680cfb548750d9804f042c"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST CASE CUSTOMFIELDS",
			"item": [
				{
					"name": "TC GET CUSTOMFIELDS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable CustomFields\", function () {\r",
									"  pm.expect(pm.response.json().customFields).to.eql(pm.environment.get(\"customFields\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string Not Found\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{customFields}}/:id?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{customFields}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "6468fbbf6924f45c1a629e36"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CUSTOMFIELDS DROPDOWN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable CustomFields\", function () {\r",
									"  pm.expect(pm.response.json().customFields).to.eql(pm.environment.get(\"customFields\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string Bad Request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{customFields}}/dropdown?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{customFields}}",
								"dropdown"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT CUSTOMFIELDS UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{actions}}/:id?text=DIOS ES BUENO&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{actions}}",
								":id"
							],
							"query": [
								{
									"key": "text",
									"value": "DIOS ES BUENO"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64655e8f3c42eeac916773ba"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT CUSTOMFIELDS DROPDOWN UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{customFields}}/:id?text=DIOS ES BUENO&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{customFields}}",
								":id"
							],
							"query": [
								{
									"key": "text",
									"value": "DIOS ES BUENO"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64655e8f3c42eeac916773ba"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST CUSTOM FIELDS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"  \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{customFields}}?idModel=646921611bfebc041af64c8b&modelType=board&name=SEBITASNACHITO&type=list&pos =top&display_cardFront=true&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{customFields}}"
							],
							"query": [
								{
									"key": "idModel",
									"value": "646921611bfebc041af64c8b"
								},
								{
									"key": "modelType",
									"value": "board"
								},
								{
									"key": "name",
									"value": "SEBITASNACHITO"
								},
								{
									"key": "type",
									"value": "list"
								},
								{
									"key": "pos ",
									"value": "top"
								},
								{
									"key": "display_cardFront",
									"value": "true"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST CASE BATCH",
			"item": [
				{
					"name": "TC GET BATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"    //resultado esperad del estado\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400\", () => {\r",
									"    //response status ok\r",
									"  pm.expect(pm.response.code).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable batch\", function () {\r",
									"  pm.expect(pm.response.json().batch).to.eql(pm.environment.get(\"batch\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string Bad Reuest\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/batch?Urls=https://trello.com/b/xETiPmxC/board-mobile&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"batch"
							],
							"query": [
								{
									"key": "Urls",
									"value": "https://trello.com/b/xETiPmxC/board-mobile"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST CASE APLICATIONS",
			"item": [
				{
					"name": "TC GET APPLICATIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable applications\", function () {\r",
									"  pm.expect(pm.response.json().applications).to.eql(pm.environment.get(\"applications\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string Not Found\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/applications/95172fed9fc9a034bf5d4635fb730bb1/compliance?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"applications",
								"95172fed9fc9a034bf5d4635fb730bb1",
								"compliance"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST CASE ENTERPRISE",
			"item": [
				{
					"name": "TC GET ENTERPRISE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Enterprize\", function () {\r",
									"  pm.expect(pm.response.json().enterprize).to.eql(pm.environment.get(\"enterprize\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string Not Found\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{enterprize}}/:id?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{enterprize}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64655e8f3c42eeac916773ba"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT ENTERPRIZE UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{enterprize}}/:id?text=DIOS ES BUENO&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{enterprize}}",
								":id"
							],
							"query": [
								{
									"key": "text",
									"value": "DIOS ES BUENO"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64655e8f3c42eeac916773ba"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST ENTERPRIZE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{enterprize}}?key={{NewKey}}&token={{NewToken}}&idList=645bf2de5787a69cefc4dc8c&name=NEW CARD&desc=Est carta se utilizara para realizar test case ",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{enterprize}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "idList",
									"value": "645bf2de5787a69cefc4dc8c"
								},
								{
									"key": "name",
									"value": "NEW CARD"
								},
								{
									"key": "desc",
									"value": "Est carta se utilizara para realizar test case "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST CASE CHECKLIST",
			"item": [
				{
					"name": "TC GET CHECKLIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that ChecklistardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"646cc9ecee07bdf25d1a5db8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Checklist\", function () {\r",
									"  pm.expect(pm.response.json().checklist).to.eql(pm.environment.get(\"Checklist\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{checklist}}/:id?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{checklist}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "646cc9ecee07bdf25d1a5db8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CHECKLIST FIELD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Checklist FieldName\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(response.name).to.eql(\"RAIN OF BLESSINGS\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Checklist\", function () {\r",
									"  pm.expect(pm.response.json().checklist).to.eql(pm.environment.get(\"Checklist\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{checklist}}/:id/name?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{checklist}}",
								":id",
								"name"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "646cc9ecee07bdf25d1a5db8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CHECKLIST BOARD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Checklist BoardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf27d235efdd4e31bb4c9\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Checklist\", function () {\r",
									"  pm.expect(pm.response.json().checklist).to.eql(pm.environment.get(\"Checklist\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{checklist}}/:id/board?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{checklist}}",
								":id",
								"board"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "646cc9ecee07bdf25d1a5db8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CHECKLIST CARD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Checklist CardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Checklist\", function () {\r",
									"  pm.expect(pm.response.json().checklist).to.eql(pm.environment.get(\"Checklist\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"645bf30b01598b8ebaf741c8\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{checklist}}/:id/cards?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{checklist}}",
								":id",
								"cards"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "646cc9ecee07bdf25d1a5db8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CHECKLIST CHECKITEM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Checklist CheckitemId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"646ce5e19165e63175cf70f2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Checklist\", function () {\r",
									"  pm.expect(pm.response.json().checklist).to.eql(pm.environment.get(\"Checklist\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"646ce5e19165e63175cf70f2\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{checklist}}/:id/checkitems?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{checklist}}",
								":id",
								"checkitems"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "646cc9ecee07bdf25d1a5db8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET CHECKLIST NEW CHECKITEM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Checklist CheckitemId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"646ce5e19165e63175cf70f2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Checklist\", function () {\r",
									"  pm.expect(pm.response.json().checklist).to.eql(pm.environment.get(\"Checklist\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{checklist}}/:id/checkitems?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{checklist}}",
								":id",
								"checkitems"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "646cc9ecee07bdf25d1a5db8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT CHECKLIST UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{checklist}}/:id?name=BLESSED CHECKLIST&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{checklist}}",
								":id"
							],
							"query": [
								{
									"key": "name",
									"value": "BLESSED CHECKLIST"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "646cc9ecee07bdf25d1a5db8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST CHECKLIST CHECKITEMS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{checklist}}/:id/checkitems?name=RAN OF BLESSINGS&idMember=62d5c433f15678138d40a1e3&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{checklist}}",
								":id",
								"checkitems"
							],
							"query": [
								{
									"key": "name",
									"value": "RAN OF BLESSINGS"
								},
								{
									"key": "idMember",
									"value": "62d5c433f15678138d40a1e3"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "646cc9ecee07bdf25d1a5db8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT CHECKLIST UPDATE FIELD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{checklist}}/:id/name?value=RAIN OF BLESSINGS&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{checklist}}",
								":id",
								"name"
							],
							"query": [
								{
									"key": "value",
									"value": "RAIN OF BLESSINGS"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "646cc9ecee07bdf25d1a5db8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST NEW CHECKLIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{checklist}}?idCard=645bf30b01598b8ebaf741c8&name=NEW CHECKLIST&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{checklist}}"
							],
							"query": [
								{
									"key": "idCard",
									"value": "645bf30b01598b8ebaf741c8"
								},
								{
									"key": "name",
									"value": "NEW CHECKLIST"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST CASE LABELS",
			"item": [
				{
					"name": "TC GET LABELS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that LabelId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf27d1ef89e53923cc99a\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable labels\", function () {\r",
									"  pm.expect(pm.response.json().label).to.eql(pm.environment.get(\"labels\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{labels}}/:id?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{labels}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d1ef89e53923cc99a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT LABELS UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{labels}}/:id?name=SADY&color=green&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{labels}}",
								":id"
							],
							"query": [
								{
									"key": "name",
									"value": "SADY"
								},
								{
									"key": "color",
									"value": "green"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d1ef89e53923cc99d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT LABELS UPDATE COLOR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{labels}}/:id/color?color=yellow&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{labels}}",
								":id",
								"color"
							],
							"query": [
								{
									"key": "color",
									"value": "yellow"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf27d1ef89e53923cc999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST LABELS NEW",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{labels}}?name=SEBITAS Y NACHITO&color=lime&idBoard=645bf27d235efdd4e31bb4c9&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{labels}}"
							],
							"query": [
								{
									"key": "name",
									"value": "SEBITAS Y NACHITO"
								},
								{
									"key": "color",
									"value": "lime"
								},
								{
									"key": "idBoard",
									"value": "645bf27d235efdd4e31bb4c9"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST CASE LISTS",
			"item": [
				{
					"name": "TC GET LISTS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that ListID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf2de5787a69cefc4dc8c\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable List\", function () {\r",
									"  pm.expect(pm.response.json().list).to.eql(pm.environment.get(\"Lists\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{lists}}/:id?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{lists}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf2de5787a69cefc4dc8c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT LISTS FIELD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{lists}}/:id/name?key={{NewKey}}&token={{NewToken}}&value=IN PROGRESS",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{lists}}",
								":id",
								"name"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "value",
									"value": "IN PROGRESS"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf2de5787a69cefc4dc8c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC  GET LISTS CARDS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that ListCardId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable List\", function () {\r",
									"  pm.expect(pm.response.json().list).to.eql(pm.environment.get(\"Lists\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"645bf30b01598b8ebaf741c8\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{lists}}/:id/cards?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{lists}}",
								":id",
								"cards"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf2de5787a69cefc4dc8c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC  GET LISTS ACTIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that List ActionId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"const responseJson = pm.response.json();\r",
									"pm.expect(responseJson.id).to.eql(\"64c18872753ccee181ae7d2f\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable List\", function () {\r",
									"  pm.expect(pm.response.json().list).to.eql(pm.environment.get(\"Lists\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"64c18872753ccee181ae7d2f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{lists}}/:id/actions?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{lists}}",
								":id",
								"actions"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf2de5787a69cefc4dc8c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC  GET LISTS BOARD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that List BoardId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf27d235efdd4e31bb4c9\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable List\", function () {\r",
									"  pm.expect(pm.response.json().list).to.eql(pm.environment.get(\"Lists\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{lists}}/:id/board?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{lists}}",
								":id",
								"board"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf2de5787a69cefc4dc8c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT LISTS UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{lists}}/:id?name=IN PROGRESS&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{lists}}",
								":id"
							],
							"query": [
								{
									"key": "name",
									"value": "IN PROGRESS"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645bf2de5787a69cefc4dc8c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET LIST CLOSED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that CardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable List\", function () {\r",
									"  pm.expect(pm.response.json().list).to.eql(pm.environment.get(\"Lists\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{lists}}/:id/closed?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{lists}}",
								":id",
								"closed"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "646cfdad2ee10756495db6b1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT LIST ARCHIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{lists}}/:id/closed?key={{NewKey}}&token={{NewToken}}&value=false",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{lists}}",
								":id",
								"closed"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "value",
									"value": "false"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "646cfdad2ee10756495db6b1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT LIST UNARCHIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{lists}}/:id/closed?key={{NewKey}}&token={{NewToken}}&value=false",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{lists}}",
								":id",
								"closed"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "value",
									"value": "false"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "646cfdad2ee10756495db6b1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT LIST  MOVE A BOARD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{lists}}/:id/idBoard?value=63e42a836c92d1453e3fdd76&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{lists}}",
								":id",
								"idBoard"
							],
							"query": [
								{
									"key": "value",
									"value": "63e42a836c92d1453e3fdd76"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "646cfdad2ee10756495db6b1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST NEW LISTS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{lists}}?name=CURRENT SPRINT&idBoard=645bf27d235efdd4e31bb4c9&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{lists}}"
							],
							"query": [
								{
									"key": "name",
									"value": "CURRENT SPRINT"
								},
								{
									"key": "idBoard",
									"value": "645bf27d235efdd4e31bb4c9"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST LISTS MOVE ALLCARDS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{lists}}/:id/moveAllCards?idBoard=645bf27d235efdd4e31bb4c9&idList=646d026e541aadbfb083b674&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{lists}}",
								":id",
								"moveAllCards"
							],
							"query": [
								{
									"key": "idBoard",
									"value": "645bf27d235efdd4e31bb4c9"
								},
								{
									"key": "idList",
									"value": "646d026e541aadbfb083b674"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "646cfeb9052bb977c30c4276"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST CASE MEMBERS",
			"item": [
				{
					"name": "TC GET MEMBERS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that MemberID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"62d5c433f15678138d40a1e3\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1199);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET MEMBERS BOARDSTARS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Member BoardStrad\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"63ddacfc8f18bf95425e69f4\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"63ddacfc8f18bf95425e69f4\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/boardStars?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"boardStars"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST MEMBERS BOARDSTARS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/boardStars?idBoard=645bf27d235efdd4e31bb4c9&pos=top&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"boardStars"
							],
							"query": [
								{
									"key": "idBoard",
									"value": "645bf27d235efdd4e31bb4c9"
								},
								{
									"key": "pos",
									"value": "top"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET MEMBERS BOARDSTARS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Member BoardStarsId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"648d0f64b173bb9d25cca72c\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/boardStars/:idStar?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"boardStars",
								":idStar"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								},
								{
									"key": "idStar",
									"value": "648d0f64b173bb9d25cca72c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT MEMBERS BOARDSTARS UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/boardStars/:idStar?pos=bottom&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"boardStars",
								":idStar"
							],
							"query": [
								{
									"key": "pos",
									"value": "bottom"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								},
								{
									"key": "idStar",
									"value": "648d0f64b173bb9d25cca72c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET MEMBERS BOARDS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Member BoardId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf27d235efdd4e31bb4c9\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"645bf27d235efdd4e31bb4c9\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/boards?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"boards"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET MEMBERS BOARDSINVITED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that CardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/boardsInvited?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"boardsInvited"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET MEMBERS CARDS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Member CardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"63dda5beddd07cc51ca7f403\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"63dda5beddd07cc51ca7f403\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/cards?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"cards"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET MEMBERS FIELD ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that MembersUsername\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.username).to.eql(\"rebecavargas28\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/username?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"username"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET MEMBERS ACTIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that MembersActionsId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"64c9b995ec8e86b503870e85\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable MembersActions\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"64c9b995ec8e86b503870e85\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/actions?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"actions"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET MEMBERS BOARDBACKGROUNDS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that CardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"blue\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable MemberBoardbackGrounds\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/boardBackgrounds?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"boardBackgrounds"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET MEMBERS BOARDBACKGROUNDS ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Mmbers BackgroundID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"63daec55ca241eb9df9511db\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/boardBackgrounds/:idBoardbackground?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"boardBackgrounds",
								":idBoardbackground"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								},
								{
									"key": "idBoardbackground",
									"value": "63daec55ca241eb9df9511db"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST MEMBERS BOARDBACKGROUNDS UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/boardBackgrounds/:idBoardbackground?brightness=light&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"boardBackgrounds",
								":idBoardbackground"
							],
							"query": [
								{
									"key": "brightness",
									"value": "light"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								},
								{
									"key": "idBoardbackground",
									"value": "63daec55ca241eb9df9511db"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST MEMBERS BOARDBACKGROUNDS IMAGE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/boardBackgrounds?file=1F601&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"boardBackgrounds"
							],
							"query": [
								{
									"key": "file",
									"value": "1F601"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET MEMBERS CUSTOM BOARDBACKGROUNDS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that MemberCustomfieldID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"63daec55ca241eb9df9511db\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/customBoardBackgrounds?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"customBoardBackgrounds"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET MEMBERS CUSTOM BOARDBACKGROUNDS ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that MemberCustomBackID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"63daec55ca241eb9df9511db\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1100ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1200);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/customBoardBackgrounds/:idBackground?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"customBoardBackgrounds",
								":idBackground"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								},
								{
									"key": "idBackground",
									"value": "63daec55ca241eb9df9511db"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT MEMBERS CUSTOM BOARDBACKGROUNDS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/customBoardBackgrounds/:idBackground?key={{NewKey}}&token={{NewToken}}&brightness=dark",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"customBoardBackgrounds",
								":idBackground"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "brightness",
									"value": "dark"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								},
								{
									"key": "idBackground",
									"value": "63daec55ca241eb9df9511db"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT MEMBERS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "fullName",
									"value": "XIME VV",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET MEMBERS CUSTOM EMOJI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Member customEmoji\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/customEmoji?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"customEmoji"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET MEMBERS CUSTOMSTICKERS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that MemberCustomStickerID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"63dc2a5856345e51aa4c3f1e\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"63dc2a5856345e51aa4c3f1e\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/customStickers?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"customStickers"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET MEMBERS NOTIFICATIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Member NotificationsId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"64e95444f3b4cadf02b3edbf\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"64e95444f3b4cadf02b3edbf\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/notifications?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"notifications"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET MEMBERS ORGANIZATIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Member OrganizationsId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"63489cf4560097053ddc5ba7\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"63489cf4560097053ddc5ba7\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/organizations?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"organizations"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET MEMBERS ORGANIZATIONS INVITED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that CardID\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/organizationsInvited?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"organizationsInvited"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET MEMBERS SAVED SEARCHES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Member SavedId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"62d5c433f15678138d40a1e5\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/savedSearches?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"savedSearches"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET MEMBERS SAVED SEARCHES ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Member SearchesId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"62d5c433f15678138d40a1e5\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/savedSearches/:idSearch?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"savedSearches",
								":idSearch"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								},
								{
									"key": "idSearch",
									"value": "62d5c433f15678138d40a1e5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC  PUT MEMBERS SAVED SEARCHES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/savedSearches/:idSearch?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"savedSearches",
								":idSearch"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								},
								{
									"key": "idSearch",
									"value": "62d5c433f15678138d40a1e5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC  PUT MEMBERS TOKENS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that MemberTokenId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"647e45f6f8107cf0ccb8fee9\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/tokens?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"tokens"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC  GET MEMBERS NOTIFICATIONS CHANNEL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that NotificationsChanelId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"63e691c426edd92990b9f1db\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has not found\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/notificationsChannelSettings/:idChannel?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"notificationsChannelSettings",
								":idChannel"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								},
								{
									"key": "idChannel",
									"value": "63e691c426edd92990b9f1db"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST MEMBERS SAVED SEARCHES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									" \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/savedSearches?name=my boards&query=@me&pos=bottom&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"savedSearches"
							],
							"query": [
								{
									"key": "name",
									"value": "my boards"
								},
								{
									"key": "query",
									"value": "@me"
								},
								{
									"key": "pos",
									"value": "bottom"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST MEMBERS CUSTOM EMOJI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/customEmoji?file=:))&name=FACE-SMILE&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"customEmoji"
							],
							"query": [
								{
									"key": "file",
									"value": ":))"
								},
								{
									"key": "name",
									"value": "FACE-SMILE"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST MEMBERS CUSTOM STICKER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/customSticker?file=https://trello-emoji.s3.amazonaws.com/5589c3ea49b40cedc28cf70e/b40d9925f4e75495104b5e560881d8e4/chorizo.png&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"customSticker"
							],
							"query": [
								{
									"key": "file",
									"value": "https://trello-emoji.s3.amazonaws.com/5589c3ea49b40cedc28cf70e/b40d9925f4e75495104b5e560881d8e4/chorizo.png"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC  POST MEMBERS AVATAR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/avatar?key={{NewKey}}&token={{NewToken}}&file=xvv",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"avatar"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "file",
									"value": "xvv"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC  GET MEMBERS ONE TIME MESSAGES DISMISSED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that ListId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf2de5787a69cefc4dc8c\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Members\", function () {\r",
									"  pm.expect(pm.response.json().member).to.eql(pm.environment.get(\"members\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 800ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/oneTimeMessagesDismissed?key={{NewKey}}&token={{NewToken}}&file=xvv",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"oneTimeMessagesDismissed"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "file",
									"value": "xvv"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC  POST MEMBERS ONE TIME MESSAGES DISMISSED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{members}}/:id/oneTimeMessagesDismissed?value=sent-possible-new-signup-event&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{members}}",
								":id",
								"oneTimeMessagesDismissed"
							],
							"query": [
								{
									"key": "value",
									"value": "sent-possible-new-signup-event"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "62d5c433f15678138d40a1e3"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST CASE NOTIFICATIONS",
			"item": [
				{
					"name": "TC GET NOTIFICATIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that NotificationsId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"64e95444f3b4cadf02b3edbf\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that the object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Notifications\", function () {\r",
									"  pm.expect(pm.response.json().notifications).to.eql(pm.environment.get(\"notifications\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(884);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{notifications}}/:idNotifications?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{notifications}}",
								":idNotifications"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "idNotifications",
									"value": "64e95444f3b4cadf02b3edbf"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET NOTIFICATIONS LIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that NotificationsId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"64e95444f3b4cadf02b3edbf\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Notifications\", function () {\r",
									"  pm.expect(pm.response.json().notifications).to.eql(pm.environment.get(\"notifications\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1534);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string not found\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"Not Fund\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{notifications}}/:idNotifications/list?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{notifications}}",
								":idNotifications",
								"list"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "idNotifications",
									"value": "64e95444f3b4cadf02b3edbf"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC  PUT NOTIFICATIONS UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{notifications}}/:idNotifications?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{notifications}}",
								":idNotifications"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "idNotifications",
									"value": "646ff1b5e149a7258b13e66a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC  PUT NOTIFICATIONS UPDATE TRUE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{notifications}}/:idNotifications?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{notifications}}",
								":idNotifications"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "idNotifications",
									"value": "646ff1b5e149a7258b13e66a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC  GET NOTIFICATIONS FIELD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Notifications\", function () {\r",
									"  pm.expect(pm.response.json().notifications).to.eql(pm.environment.get(\"notifications\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{notifications}}/:idNotifications/unread?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{notifications}}",
								":idNotifications",
								"unread"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "idNotifications",
									"value": "64e95444f3b4cadf02b3edbf"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC  POST NOTIFICATIONS MARK ALL READ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{notifications}}/all/read?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{notifications}}",
								"all",
								"read"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC  GET NOTIFICATIONS BOARD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that NotificationsBoardId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf27d235efdd4e31bb4c9\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Notifications\", function () {\r",
									"  pm.expect(pm.response.json().notifications).to.eql(pm.environment.get(\"notifications\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{notifications}}/:idNotifications/board?key={{NewKey}}&token={{NewToken}}&value=null",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{notifications}}",
								":idNotifications",
								"board"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "value",
									"value": "null"
								}
							],
							"variable": [
								{
									"key": "idNotifications",
									"value": "64e95444f3b4cadf02b3edbf"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC  GET NOTIFICATIONS CARD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that NotificationsCardId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf30b01598b8ebaf741c8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Notifications\", function () {\r",
									"  pm.expect(pm.response.json().notifications).to.eql(pm.environment.get(\"notifications\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{notifications}}/:idNotifications/card?key={{NewKey}}&token={{NewToken}}&value=null",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{notifications}}",
								":idNotifications",
								"card"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "value",
									"value": "null"
								}
							],
							"variable": [
								{
									"key": "idNotifications",
									"value": "64e95444f3b4cadf02b3edbf"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC  GET NOTIFICATIONS MEMBER CREATOR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that NotificationsMembercreatorId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"646ff069f718d409005d7d4d\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Notifications\", function () {\r",
									"  pm.expect(pm.response.json().notifications).to.eql(pm.environment.get(\"notifications\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{notifications}}/:idNotifications/memberCreator?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{notifications}}",
								":idNotifications",
								"memberCreator"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "idNotifications",
									"value": "64e95444f3b4cadf02b3edbf"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC  GET NOTIFICATIONS ORGANIZATIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that NotificationsMembercreatorId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf2261afd933bd897792c\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Notifications\", function () {\r",
									"  pm.expect(pm.response.json().notifications).to.eql(pm.environment.get(\"notifications\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(624);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string not found\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{notifications}}/:id/organization?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{notifications}}",
								":id",
								"organization"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64e95444f3b4cadf02b3edbf"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST CASE ORGANIZATIONS",
			"item": [
				{
					"name": "TC POST ORGANIZATIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that OrganizationId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"64bec826ab64d46cacb10c02\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{organizations}}?displayName=TESTING MOBILE&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{organizations}}"
							],
							"query": [
								{
									"key": "displayName",
									"value": "TESTING MOBILE"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ORGANIZATIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that OrgnizationId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"6470c66e6a7a28959c74fba3\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable organizations\", function () {\r",
									"  pm.expect(pm.response.json().organizations).to.eql(pm.environment.get(\"organizations\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{organizations}}/:id?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{organizations}}",
								":id"
							],
							"query": [
								{
									"key": "displayName",
									"value": "TESTING MOBILE",
									"disabled": true
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "6470c66e6a7a28959c74fba3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT ORGANIZATIONS UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									" \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{organizations}}/:id?name=millonariabendicion&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{organizations}}",
								":id"
							],
							"query": [
								{
									"key": "name",
									"value": "millonariabendicion"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "6470c66e6a7a28959c74fba3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ORGANIZATIONS FIELD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Organizationfield\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.value).to.eql(\"millonariabendicion\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable organizations\", function () {\r",
									"  pm.expect(pm.response.json().organizations).to.eql(pm.environment.get(\"organizations\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{organizations}}/:id/name?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{organizations}}",
								":id",
								"name"
							],
							"query": [
								{
									"key": "name",
									"value": "millonariabendicion",
									"disabled": true
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "6470c66e6a7a28959c74fba3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ORGANIZATIONS ACTIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that OrgnizationActionId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"64711c498c26e85a3750f508\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable organizations\", function () {\r",
									"  pm.expect(pm.response.json().organizations).to.eql(pm.environment.get(\"organizations\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{organizations}}/:id/actions?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{organizations}}",
								":id",
								"actions"
							],
							"query": [
								{
									"key": "name",
									"value": "millonariabendicion",
									"disabled": true
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "6470c66e6a7a28959c74fba3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ORGANIZATIONS BOARDS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that OrgnizationBoardId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"6470c66e6a7a28959c74fba3\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable organizations\", function () {\r",
									"  pm.expect(pm.response.json().organizations).to.eql(pm.environment.get(\"organizations\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{organizations}}/:id/boards?filter=all&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{organizations}}",
								":id",
								"boards"
							],
							"query": [
								{
									"key": "filter",
									"value": "all"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "fields",
									"value": "memberships",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "6470c66e6a7a28959c74fba3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ORGANIZATIONS MEMBERS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that OrgnizationMembersId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"64711c488c26e85a3750f463\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable organizations\", function () {\r",
									"  pm.expect(pm.response.json().organizations).to.eql(pm.environment.get(\"organizations\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{organizations}}/:id/members?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{organizations}}",
								":id",
								"members"
							],
							"query": [
								{
									"key": "attachments",
									"value": "true",
									"disabled": true
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "fields",
									"value": "memberships",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "6470c66e6a7a28959c74fba3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST ORGANIZATIONS LOGO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{organizations}}/:id/logo?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{organizations}}",
								":id",
								"logo"
							],
							"query": [
								{
									"key": "type",
									"value": "admin",
									"disabled": true
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "file",
									"value": ":()",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "6470c66e6a7a28959c74fba3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT ORGANIZATIONS MEMBERS INVITED1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{organizations}}/:id/members?email=raquelteran910@gmail.com&fullName=RAQUEL TERAN&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{organizations}}",
								":id",
								"members"
							],
							"query": [
								{
									"key": "email",
									"value": "raquelteran910@gmail.com"
								},
								{
									"key": "fullName",
									"value": "RAQUEL TERAN"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "6470c66e6a7a28959c74fba3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT ORGANIZATIONS MEMBERS INVITED2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{organizations}}/:id/members?email=rebeca_mena_6@gmail.com&fullName=BEKY MENA VARGAS&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{organizations}}",
								":id",
								"members"
							],
							"query": [
								{
									"key": "email",
									"value": "rebeca_mena_6@gmail.com"
								},
								{
									"key": "fullName",
									"value": "BEKY MENA VARGAS"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "6470c66e6a7a28959c74fba3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ORGANIZATIONS MEMBERSSHIPS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that OrgnizationMembershipId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"6470c66e6a7a28959c74fba5\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable organizations\", function () {\r",
									"  pm.expect(pm.response.json().organizations).to.eql(pm.environment.get(\"organizations\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{organizations}}/:id/memberships?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{organizations}}",
								":id",
								"memberships"
							],
							"query": [
								{
									"key": "email",
									"value": "rebeca_mena_6@gmail.com",
									"disabled": true
								},
								{
									"key": "fullName",
									"value": "BEKY MENA VARGAS",
									"disabled": true
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "6470c66e6a7a28959c74fba3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ORGANIZATIONS MEMBERSHIP ADMIN1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that OrgnizationMembershipId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"6470c66e6a7a28959c74fba5\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable organizations\", function () {\r",
									"  pm.expect(pm.response.json().organizations).to.eql(pm.environment.get(\"organizations\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{organizations}}/:id/memberships/:idMemberships?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{organizations}}",
								":id",
								"memberships",
								":idMemberships"
							],
							"query": [
								{
									"key": "email",
									"value": "rebeca_mena_6@gmail.com",
									"disabled": true
								},
								{
									"key": "fullName",
									"value": "BEKY MENA VARGAS",
									"disabled": true
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "6470c66e6a7a28959c74fba3"
								},
								{
									"key": "idMemberships",
									"value": "6470c66e6a7a28959c74fba5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ORGANIZATIONS MEMBERSHIP NORMAL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that OrgnizationMembershipId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"64711ae4a590c6ed4e37d6d3\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable organizations\", function () {\r",
									"  pm.expect(pm.response.json().organizations).to.eql(pm.environment.get(\"organizations\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{organizations}}/:id/memberships/:idMemberships?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{organizations}}",
								":id",
								"memberships",
								":idMemberships"
							],
							"query": [
								{
									"key": "email",
									"value": "rebeca_mena_6@gmail.com",
									"disabled": true
								},
								{
									"key": "fullName",
									"value": "BEKY MENA VARGAS",
									"disabled": true
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "6470c66e6a7a28959c74fba3"
								},
								{
									"key": "idMemberships",
									"value": "64711ae4a590c6ed4e37d6d3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ORGANIZATIONS MEMBERSHIP ADMIN2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Orgnization MemberId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"64711c498c26e85a3750f488\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable organizations\", function () {\r",
									"  pm.expect(pm.response.json().organizations).to.eql(pm.environment.get(\"organizations\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{organizations}}/:id/memberships/:idMemberships?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{organizations}}",
								":id",
								"memberships",
								":idMemberships"
							],
							"query": [
								{
									"key": "email",
									"value": "rebeca_mena_6@gmail.com",
									"disabled": true
								},
								{
									"key": "fullName",
									"value": "BEKY MENA VARGAS",
									"disabled": true
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "6470c66e6a7a28959c74fba3"
								},
								{
									"key": "idMemberships",
									"value": "64711c498c26e85a3750f488"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ORGANIZATIONS PLUGIN DATA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that OrgnizationPluginId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable organizations\", function () {\r",
									"  pm.expect(pm.response.json().organizations).to.eql(pm.environment.get(\"organizations\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{organizations}}/:id/pluginData?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{organizations}}",
								":id",
								"pluginData"
							],
							"query": [
								{
									"key": "email",
									"value": "rebeca_mena_6@gmail.com",
									"disabled": true
								},
								{
									"key": "fullName",
									"value": "BEKY MENA VARGAS",
									"disabled": true
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "6470c66e6a7a28959c74fba3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ORGANIZATIONS TAGS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that OrganizationTags\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable organizations\", function () {\r",
									"  pm.expect(pm.response.json().organizations).to.eql(pm.environment.get(\"organizations\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{organizations}}/:id/tags?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{organizations}}",
								":id",
								"tags"
							],
							"query": [
								{
									"key": "value",
									"value": "na",
									"disabled": true
								},
								{
									"key": "name",
									"value": "beautiful",
									"disabled": true
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "6470c66e6a7a28959c74fba3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST ORGANIZATIONS TAGS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful POST request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{organizations}}/:id/tags?name=NEWCOLLECTION&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{organizations}}",
								":id",
								"tags"
							],
							"query": [
								{
									"key": "value",
									"value": "na",
									"disabled": true
								},
								{
									"key": "name",
									"value": "NEWCOLLECTION"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "6470c66e6a7a28959c74fba3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET ORGANIZATIONS BILLABLE GUEST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Orgnization BoardId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645bf27d235efdd4e31bb4c9\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable organizations\", function () {\r",
									"  pm.expect(pm.response.json().organizations).to.eql(pm.environment.get(\"organizations\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{organizations}}/:id/newBillableGuests/:idBoard?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{organizations}}",
								":id",
								"newBillableGuests",
								":idBoard"
							],
							"query": [
								{
									"key": "value",
									"value": "na",
									"disabled": true
								},
								{
									"key": "name",
									"value": "beautiful",
									"disabled": true
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "6470c66e6a7a28959c74fba3"
								},
								{
									"key": "idBoard",
									"value": "645bf27d235efdd4e31bb4c9"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST CASE PLUGINS",
			"item": [
				{
					"name": "TC GET PLUGINS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that PluginId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645e5a6db68ed70f77d877ce\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Plugins\", function () {\r",
									"  pm.expect(pm.response.json().plugin).to.eql(pm.environment.get(\"plugins\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{plugins}}/:id?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{plugins}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645e5a6db68ed70f77d877ce"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT PLUGINS LISTING UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{plugins}}/:id/listings/:idListing?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{plugins}}",
								":id",
								"listings",
								":idListing"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645e5a6db68ed70f77d877ce"
								},
								{
									"key": "idListing",
									"value": "645e5a6db68ed70f77d877d0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET COMPLIANCE MEMBER PRIVACY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\", function () {\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that PluginId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"645e5a6db68ed70f77d877ce\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Plugins\", function () {\r",
									"  pm.expect(pm.response.json().plugin).to.eql(pm.environment.get(\"plugins\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string bad request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{plugins}}/:id/compliance/memberPrivacy?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{plugins}}",
								":id",
								"compliance",
								"memberPrivacy"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645e5a6db68ed70f77d877ce"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT PLUGINS UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"   \r",
									"pm.test(\"Successful PUT request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{plugins}}/:id?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{plugins}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "645e5a6db68ed70f77d877ce"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST CASE SEARCH",
			"item": [
				{
					"name": "TC GET  SEARCHS FORMAT BINARYS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Search\", function () {\r",
									"  pm.expect(pm.response.json().search).to.eql(pm.environment.get(\"search\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{search}}?key={{NewKey}}&token={{NewToken}}&query=list format binarys emojis",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{search}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "query",
									"value": "list format binarys emojis"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET  SEARCHS LIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Search\", function () {\r",
									"  pm.expect(pm.response.json().search).to.eql(pm.environment.get(\"search\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{search}}?query=lists of board&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{search}}"
							],
							"query": [
								{
									"key": "query",
									"value": "lists of board"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET  SEARCHS CARD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Search\", function () {\r",
									"  pm.expect(pm.response.json().search).to.eql(pm.environment.get(\"search\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{search}}?query=cards&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{search}}"
							],
							"query": [
								{
									"key": "query",
									"value": "cards"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET  SEARCHS BOARD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Search\", function () {\r",
									"  pm.expect(pm.response.json().search).to.eql(pm.environment.get(\"search\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{search}}?query=board&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{search}}"
							],
							"query": [
								{
									"key": "query",
									"value": "board"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET  SEARCHS LABELS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Search\", function () {\r",
									"  pm.expect(pm.response.json().search).to.eql(pm.environment.get(\"search\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{search}}?query=nameLabels&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{search}}"
							],
							"query": [
								{
									"key": "query",
									"value": "nameLabels"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET  SEARCHS ACTIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Search\", function () {\r",
									"  pm.expect(pm.response.json().search).to.eql(pm.environment.get(\"search\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{search}}?query=actions&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{search}}"
							],
							"query": [
								{
									"key": "query",
									"value": "actions"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET  SEARCHS APLICATIONS COMPLIANCE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Search\", function () {\r",
									"  pm.expect(pm.response.json().search).to.eql(pm.environment.get(\"search\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{search}}?query=idAplicationscompliance&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{search}}"
							],
							"query": [
								{
									"key": "query",
									"value": "idAplicationscompliance"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET  SEARCHS BATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Search\", function () {\r",
									"  pm.expect(pm.response.json().search).to.eql(pm.environment.get(\"search\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{search}}?query=urls_batch&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{search}}"
							],
							"query": [
								{
									"key": "query",
									"value": "urls_batch"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET  SEARCHS EMOJI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable\", function () {\r",
									"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Search\", function () {\r",
									"  pm.expect(pm.response.json().search).to.eql(pm.environment.get(\"search\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{search}}?query=idEmoji&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{search}}"
							],
							"query": [
								{
									"key": "query",
									"value": "idEmoji"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET  SEARCHS NOTIFICATIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Search\", function () {\r",
									"  pm.expect(pm.response.json().search).to.eql(pm.environment.get(\"search\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{search}}?query=idNotifications&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{search}}"
							],
							"query": [
								{
									"key": "query",
									"value": "idNotifications"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET  SEARCHS ORGANIZATIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable\", function () {\r",
									"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Search\", function () {\r",
									"  pm.expect(pm.response.json().search).to.eql(pm.environment.get(\"search\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{search}}?query=idOrganizations&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{search}}"
							],
							"query": [
								{
									"key": "query",
									"value": "idOrganizations"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET  SEARCHS BOARD ORGANIZATIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Search\", function () {\r",
									"  pm.expect(pm.response.json().search).to.eql(pm.environment.get(\"search\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{search}}?query=board_organization&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{search}}"
							],
							"query": [
								{
									"key": "query",
									"value": "board_organization"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET  SEARCH BOARD LAST ACTIVITY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Search\", function () {\r",
									"  pm.expect(pm.response.json().search).to.eql(pm.environment.get(\"search\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{search}}?query=boards_dateLastActivity&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{search}}"
							],
							"query": [
								{
									"key": "query",
									"value": "boards_dateLastActivity"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET  SEARCH IDORGANIZATIONS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Search\", function () {\r",
									"  pm.expect(pm.response.json().search).to.eql(pm.environment.get(\"search\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{search}}?query=board_name,idOrganization&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{search}}"
							],
							"query": [
								{
									"key": "query",
									"value": "board_name,idOrganization"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET  SEARCH IDMODEL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Search\", function () {\r",
									"  pm.expect(pm.response.json().search).to.eql(pm.environment.get(\"search\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{search}}?query=board_name,idModel&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{search}}"
							],
							"query": [
								{
									"key": "query",
									"value": "board_name,idModel"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET  SEARCH CARD CHECKITEMS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Search\", function () {\r",
									"  pm.expect(pm.response.json().search).to.eql(pm.environment.get(\"search\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{search}}?query=card_checkItemStates&Style=form&Default=all&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{search}}"
							],
							"query": [
								{
									"key": "query",
									"value": "card_checkItemStates"
								},
								{
									"key": "Style",
									"value": "form"
								},
								{
									"key": "Default",
									"value": "all"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET  SEARCH MEMBERS LIMIT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Search\", function () {\r",
									"  pm.expect(pm.response.json().search).to.eql(pm.environment.get(\"search\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{search}}/members?query=limit&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{search}}",
								"members"
							],
							"query": [
								{
									"key": "query",
									"value": "limit"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET  SEARCH MEMBERS BOARDS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Search\", function () {\r",
									"  pm.expect(pm.response.json().search).to.eql(pm.environment.get(\"search\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{search}}/members?query=idBoard_645bf27d235efdd4e31bb4c9&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{search}}",
								"members"
							],
							"query": [
								{
									"key": "query",
									"value": "idBoard_645bf27d235efdd4e31bb4c9"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET  SEARCH MEMBERS ONLY ORG.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"\r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Search\", function () {\r",
									"  pm.expect(pm.response.json().search).to.eql(pm.environment.get(\"search\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1600ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{search}}/members?query=onlyOrgMembers&key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{search}}",
								"members"
							],
							"query": [
								{
									"key": "query",
									"value": "onlyOrgMembers"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST CASE TOKENS",
			"item": [
				{
					"name": "TC GET TOKENS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that TokenId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"647e45f6f8107cf0ccb8fee9\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Tokens\", function () {\r",
									"  pm.expect(pm.response.json().token).to.eql(pm.environment.get(\"tokens\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1100);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{tokens}}/:id?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{tokens}}",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "ATTA5a90760ea1aee92a29aa77223fe210fbcadd742f6d8a34e77929704b8e04c78f66E421F7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET TOKENS MEMBER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Token MemberId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"62d5c433f15678138d40a1e3\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Tokens\", function () {\r",
									"  pm.expect(pm.response.json().token).to.eql(pm.environment.get(\"tokens\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1200ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(999);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{tokens}}/:id/member?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{tokens}}",
								":id",
								"member"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "ATTA5a90760ea1aee92a29aa77223fe210fbcadd742f6d8a34e77929704b8e04c78f66E421F7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET TOKENS WEBHOOKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that TokenWebhooksId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"64bed66a4607163ce671df7c\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Tokens\", function () {\r",
									"  pm.expect(pm.response.json().token).to.eql(pm.environment.get(\"tokens\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{tokens}}/:id/webhooks?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{tokens}}",
								":id",
								"webhooks"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "ATTA5a90760ea1aee92a29aa77223fe210fbcadd742f6d8a34e77929704b8e04c78f66E421F7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC POST TOKENS WEBHOOKS CREATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{tokens}}/:id/webhooks?key={{NewKey}}&token={{NewToken}}&callbackURL=https://trello.com/bekyvv&idModel=645bf30b01598b8ebaf741c8",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{tokens}}",
								":id",
								"webhooks"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "callbackURL",
									"value": "https://trello.com/bekyvv"
								},
								{
									"key": "idModel",
									"value": "645bf30b01598b8ebaf741c8"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "ATTA5a90760ea1aee92a29aa77223fe210fbcadd742f6d8a34e77929704b8e04c78f66E421F7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET TOKENS WEBHOOKS ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that TokenWebhooksId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"64bed66a4607163ce671df7c\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Tokens\", function () {\r",
									"  pm.expect(pm.response.json().token).to.eql(pm.environment.get(\"tokens\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{tokens}}/:id/webhooks/:idWebhooks?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{tokens}}",
								":id",
								"webhooks",
								":idWebhooks"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "callbackURL",
									"value": "https://trello.com/bekyvv",
									"disabled": true
								},
								{
									"key": "idModel",
									"value": "62d5c433f15678138d40a1e3",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "ATTA5a90760ea1aee92a29aa77223fe210fbcadd742f6d8a34e77929704b8e04c78f66E421F7"
								},
								{
									"key": "idWebhooks",
									"value": "64bed66a4607163ce671df7c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT TOKENS WEBHOOKS UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{tokens}}/:id/webhooks/:idWebhook?key={{NewKey}}&token={{NewToken}}&callbackURL=https://trello.com/bekyvv&idModel=62d5c433f15678138d40a1e3",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{tokens}}",
								":id",
								"webhooks",
								":idWebhook"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "callbackURL",
									"value": "https://trello.com/bekyvv"
								},
								{
									"key": "idModel",
									"value": "62d5c433f15678138d40a1e3"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "ATTA5a90760ea1aee92a29aa77223fe210fbcadd742f6d8a34e77929704b8e04c78f66E421F7"
								},
								{
									"key": "idWebhook",
									"value": "648a2e5790ab9668f2a605a3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC DELETE TOKENS WEBHOOKS",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{tokens}}/:id/webhooks/:idWebhooks?key={{NewKey}}&token={{NewToken}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{tokens}}",
								":id",
								"webhooks",
								":idWebhooks"
							],
							"query": [
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "callbackURL",
									"value": "https://trello.com/bekyvv",
									"disabled": true
								},
								{
									"key": "idModel",
									"value": "62d5c433f15678138d40a1e3",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "ATTA18be6c1c9b612045683d6c6e55fd8c1138d321b2dc30b949f5cbb88533f88356DBA4DEA2"
								},
								{
									"key": "idWebhooks",
									"value": "6477db19647e1fec54e3b006"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TEST CASE WEBHOOKS",
			"item": [
				{
					"name": "TC POST WEBHOOKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{webhooks}}?callbackURL=https://trello.com/ximevv&idModel=62d5c433f15678138d40a1e3&token={{NewToken}}&key={{NewKey}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{webhooks}}"
							],
							"query": [
								{
									"key": "callbackURL",
									"value": "https://trello.com/ximevv"
								},
								{
									"key": "idModel",
									"value": "62d5c433f15678138d40a1e3"
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET WEBHOOKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that WebhooksId\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(\"64c0495d79a8e67ea8d65548\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Webhooks\", function () {\r",
									"  pm.expect(pm.response.json().webhooks).to.eql(pm.environment.get(\"webhooks\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{webhooks}}/:id?token={{NewToken}}&key={{NewKey}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{webhooks}}",
								":id"
							],
							"query": [
								{
									"key": "callbackURL",
									"value": "https://trello.com/ximevv",
									"disabled": true
								},
								{
									"key": "idModel",
									"value": "62d5c433f15678138d40a1e3",
									"disabled": true
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64c0495d79a8e67ea8d65548"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC PUT WEBHOOKS UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{webhooks}}/:id?token={{NewToken}}&key={{NewKey}}&desc=Love",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{webhooks}}",
								":id"
							],
							"query": [
								{
									"key": "callbackURL",
									"value": "https://trello.com/ximevv",
									"disabled": true
								},
								{
									"key": "idModel",
									"value": "62d5c433f15678138d40a1e3",
									"disabled": true
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "desc",
									"value": "Love"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64c0495d79a8e67ea8d65548"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC GET WEBHOOKS FIELD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"resultado esperado\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that Webhooks CallbackURL\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.callbackUrl).to.eql(\"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that an object contains keys or properties\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"    const responseJson = pm.response.json();\r",
									"pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
									"pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
									"pm.expect({a: 1}).to.have.property('a');\r",
									"pm.expect({a: 1, b: 2}).to.be.an('object')\r",
									"  .that.has.all.keys('a', 'b');\r",
									"  });\r",
									"  \r",
									"   pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate that object contains EnvironmentVariable\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"postman.setEnvironmentVariable(\"key\", \"value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate variable key with methodology get\", function () {\r",
									"  //access a variable at any scope including local\r",
									"pm.variables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a global variable\r",
									"pm.globals.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access a collection variable\r",
									"pm.collectionVariables.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"//access an environment variable\r",
									"pm.environment.get(\"95172fed9fc9a034bf5d4635fb730bb1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable Webhooks\", function () {\r",
									"  pm.expect(pm.response.json().webhooks).to.eql(pm.environment.get(\"webhooks\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"   //parse the response JSON and test properties\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie DSC is present\", () => {\r",
									"    //parse the response JSON and test properties\r",
									"  pm.expect(pm.cookies.has('dsc')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie preAuthProps is present\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.cookies.has('preAuthProps')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string ok\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/*\r",
									"response has the following structure:\r",
									"{\r",
									"  \"id\": \"61c9a684252baf6cc7dafa3f\",\r",
									"  \"created\": true,\r",
									"  \"errors\": []\r",
									"}\r",
									"*/\r",
									"pm.test(\"Object is contained\", () => {\r",
									"  const expectedObject = {\r",
									"    \"created\": true,\r",
									"    \"errors\": []\r",
									"  };\r",
									"  pm.expect(pm.response.json(true)).to.deep.include(Boolean);\r",
									"});\r",
									"\r",
									"pm.test(\"Check the active environment\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.environment.name).to.eql(\"Prod\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful GET request\", () => {\r",
									"    //parse the response JSON and test property\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{webhooks}}/:id/callbackURL?token={{NewToken}}&key={{NewKey}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{webhooks}}",
								":id",
								"callbackURL"
							],
							"query": [
								{
									"key": "callbackURL",
									"value": "https://trello.com/ximevv",
									"disabled": true
								},
								{
									"key": "idModel",
									"value": "62d5c433f15678138d40a1e3",
									"disabled": true
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "desc",
									"value": "Love",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "64c0495d79a8e67ea8d65548"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC DELETE WEBHOOKS",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{dom}}/{{webhooks}}/:id/callbackURL?token={{NewToken}}&key={{NewKey}}",
							"host": [
								"{{dom}}"
							],
							"path": [
								"{{webhooks}}",
								":id",
								"callbackURL"
							],
							"query": [
								{
									"key": "callbackURL",
									"value": "https://trello.com/ximevv",
									"disabled": true
								},
								{
									"key": "idModel",
									"value": "62d5c433f15678138d40a1e3",
									"disabled": true
								},
								{
									"key": "token",
									"value": "{{NewToken}}"
								},
								{
									"key": "key",
									"value": "{{NewKey}}"
								},
								{
									"key": "desc",
									"value": "Love",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "6477d5d7661693cfb313dedc"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "ATTA18be6c1c9b612045683d6c6e55fd8c1138d321b2dc30b949f5cbb88533f88356DBA4DEA2",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}